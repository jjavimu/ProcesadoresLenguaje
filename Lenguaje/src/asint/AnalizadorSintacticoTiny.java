
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri May 21 19:48:05 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.*;
import asint.*;
import ast.*;
import ast.estructuras.*;
import ast.accesos.*;
import ast.expresiones.*;
import ast.funciones.*;
import ast.instrucciones.*;
import ast.tipos.*;
import errors.GestionErroresTiny;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri May 21 19:48:05 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\006\011\000\002\006\011\000" +
    "\002\006\005\000\002\007\005\000\002\007\003\000\002" +
    "\004\010\000\002\004\010\000\002\005\004\000\002\005" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\004\000\002\047\006\000\002" +
    "\047\005\000\002\011\010\000\002\010\007\000\002\012" +
    "\006\000\002\012\004\000\002\012\002\000\002\013\005" +
    "\000\002\013\003\000\002\013\002\000\002\016\005\000" +
    "\002\015\004\000\002\015\002\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\004\000\002\033\006\000" +
    "\002\033\005\000\002\033\003\000\002\034\003\000\002" +
    "\034\004\000\002\034\006\000\002\017\005\000\002\017" +
    "\007\000\002\017\005\000\002\020\006\000\002\020\006" +
    "\000\002\021\007\000\002\021\011\000\002\021\005\000" +
    "\002\022\007\000\002\022\005\000\002\023\020\000\002" +
    "\023\005\000\002\024\012\000\002\024\011\000\002\024" +
    "\010\000\002\025\004\000\002\025\003\000\002\026\010" +
    "\000\002\026\010\000\002\027\005\000\002\032\007\000" +
    "\002\032\007\000\002\030\005\000\002\030\004\000\002" +
    "\030\004\000\002\031\004\000\002\031\004\000\002\035" +
    "\006\000\002\036\005\000\002\036\003\000\002\037\005" +
    "\000\002\037\003\000\002\040\005\000\002\040\005\000" +
    "\002\040\003\000\002\041\005\000\002\041\005\000\002" +
    "\041\005\000\002\041\005\000\002\041\003\000\002\042" +
    "\005\000\002\042\005\000\002\042\003\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\043\003\000" +
    "\002\044\004\000\002\044\004\000\002\044\003\000\002" +
    "\045\005\000\002\045\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\006\000\002\046\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\026\003\ufffb\004\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\064\ufffb\001\002" +
    "\000\026\003\021\004\014\041\011\042\016\043\024\044" +
    "\025\045\013\046\007\047\017\064\015\001\002\000\004" +
    "\002\006\001\002\000\004\002\000\001\002\000\006\003" +
    "\341\004\342\001\002\000\026\003\ufffd\004\ufffd\041\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\064" +
    "\ufffd\001\002\000\012\004\ufff1\011\ufff1\016\ufff1\025\ufff1" +
    "\001\002\000\010\004\327\011\121\025\120\001\002\000" +
    "\012\004\uffee\011\uffee\016\uffee\025\uffee\001\002\000\012" +
    "\004\uffeb\011\uffeb\016\uffeb\025\uffeb\001\002\000\004\004" +
    "\317\001\002\000\012\004\ufff0\011\ufff0\025\ufff0\071\026" +
    "\001\002\000\012\004\uffec\011\uffec\016\uffec\025\uffec\001" +
    "\002\000\026\003\ufffe\004\ufffe\041\ufffe\042\ufffe\043\ufffe" +
    "\044\ufffe\045\ufffe\046\ufffe\047\ufffe\064\ufffe\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\001\001\002\000\026" +
    "\003\ufffc\004\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045" +
    "\ufffc\046\ufffc\047\ufffc\064\ufffc\001\002\000\012\004\uffed" +
    "\011\uffed\016\uffed\025\uffed\001\002\000\012\004\uffef\011" +
    "\uffef\016\uffef\025\uffef\001\002\000\004\016\027\001\002" +
    "\000\004\017\030\001\002\000\004\022\032\001\002\000" +
    "\004\002\uffe6\001\002\000\042\003\uffdd\004\uffdd\011\uffdd" +
    "\023\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\047" +
    "\uffdd\056\uffdd\057\uffdd\060\uffdd\063\uffdd\070\uffdd\072\uffdd" +
    "\001\002\000\042\003\054\004\041\011\046\023\055\041" +
    "\011\042\064\043\024\044\025\045\013\047\017\056\036" +
    "\057\062\060\043\063\042\070\040\072\053\001\002\000" +
    "\044\003\uffd8\004\uffd8\011\uffd8\023\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\047\uffd8\056\uffd8\057\uffd8\060" +
    "\uffd8\063\uffd8\066\uffd8\070\uffd8\072\uffd8\001\002\000\006" +
    "\003\316\033\315\001\002\000\006\003\307\016\310\001" +
    "\002\000\044\003\uffd4\004\uffd4\011\uffd4\023\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\047\uffd4\056\uffd4\057" +
    "\uffd4\060\uffd4\063\uffd4\066\uffd4\070\uffd4\072\uffd4\001\002" +
    "\000\036\003\305\004\076\005\115\006\113\010\070\011" +
    "\046\016\110\033\303\040\071\050\100\051\111\052\107" +
    "\053\072\054\112\001\002\000\020\004\uffeb\011\uffeb\013" +
    "\uffcf\016\164\020\uffcf\025\uffeb\035\uffcf\001\002\000\006" +
    "\003\251\016\252\001\002\000\006\003\241\016\242\001" +
    "\002\000\010\004\233\011\121\025\120\001\002\000\044" +
    "\003\uffd6\004\uffd6\011\uffd6\023\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\047\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\063\uffd6\066\uffd6\070\uffd6\072\uffd6\001\002\000\010\004" +
    "\213\011\046\016\230\001\002\000\044\003\uffde\004\uffde" +
    "\011\uffde\023\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045" +
    "\uffde\047\uffde\056\uffde\057\uffde\060\uffde\063\uffde\066\uffde" +
    "\070\uffde\072\uffde\001\002\000\044\003\uffda\004\uffda\011" +
    "\uffda\023\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda" +
    "\047\uffda\056\uffda\057\uffda\060\uffda\063\uffda\066\uffda\070" +
    "\uffda\072\uffda\001\002\000\044\003\uffdc\004\uffdc\011\uffdc" +
    "\023\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\047" +
    "\uffdc\056\uffdc\057\uffdc\060\uffdc\063\uffdc\066\uffdc\070\uffdc" +
    "\072\uffdc\001\002\000\044\003\uffd5\004\uffd5\011\uffd5\023" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\047\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\063\uffd5\066\uffd5\070\uffd5\072" +
    "\uffd5\001\002\000\004\016\222\001\002\000\004\033\221" +
    "\001\002\000\054\002\uffdf\003\uffdf\004\uffdf\011\uffdf\023" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\056\uffdf\057\uffdf\060\uffdf\062\uffdf\063\uffdf\064" +
    "\uffdf\066\uffdf\070\uffdf\072\uffdf\001\002\000\044\003\uffd7" +
    "\004\uffd7\011\uffd7\023\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\047\uffd7\056\uffd7\057\uffd7\060\uffd7\063\uffd7" +
    "\066\uffd7\070\uffd7\072\uffd7\001\002\000\044\003\uffdb\004" +
    "\uffdb\011\uffdb\023\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb" +
    "\045\uffdb\047\uffdb\056\uffdb\057\uffdb\060\uffdb\063\uffdb\066" +
    "\uffdb\070\uffdb\072\uffdb\001\002\000\044\003\uffd9\004\uffd9" +
    "\011\uffd9\023\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\047\uffd9\056\uffd9\057\uffd9\060\uffd9\063\uffd9\066\uffd9" +
    "\070\uffd9\072\uffd9\001\002\000\060\003\uffd0\007\uffd0\010" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\001\002\000\006\003\201\016\202\001\002\000" +
    "\010\013\067\020\065\035\066\001\002\000\012\004\ufff0" +
    "\011\ufff0\016\ufff0\025\ufff0\001\002\000\032\004\076\005" +
    "\115\006\113\010\070\011\046\016\110\040\071\050\100" +
    "\051\111\052\107\053\072\054\112\001\002\000\004\004" +
    "\176\001\002\000\032\004\076\005\115\006\113\010\070" +
    "\011\046\016\110\040\071\050\100\051\111\052\107\053" +
    "\072\054\112\001\002\000\032\004\076\005\115\006\113" +
    "\010\070\011\046\016\110\040\071\050\100\051\111\052" +
    "\107\053\072\054\112\001\002\000\032\004\076\005\115" +
    "\006\113\010\070\011\046\016\110\040\071\050\100\051" +
    "\111\052\107\053\072\054\112\001\002\000\052\003\uff93" +
    "\007\uff93\010\uff93\011\uff93\012\uff93\014\uff93\015\uff93\017" +
    "\uff93\021\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93" +
    "\031\uff93\032\uff93\033\uff93\034\uff93\036\uff93\037\uff93\001" +
    "\002\000\052\003\uff91\007\uff91\010\uff91\011\uff91\012\uff91" +
    "\014\uff91\015\uff91\017\uff91\021\uff91\024\uff91\025\uff91\026" +
    "\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91" +
    "\036\uff91\037\uff91\001\002\000\052\003\uff99\007\uff99\010" +
    "\uff99\011\uff99\012\uff99\014\uff99\015\uff99\017\uff99\021\uff99" +
    "\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\034\uff99\036\uff99\037\uff99\001\002\000\052" +
    "\003\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\014\172\015" +
    "\uff9b\017\uff9b\021\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\036\uff9b\037" +
    "\uff9b\001\002\000\060\003\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\014\uffcf\015\uffcf\016\164\017\uffcf\020\uffcf\021" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\001" +
    "\002\000\050\003\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e" +
    "\015\uff9e\017\uff9e\021\uff9e\024\uff9e\025\uff9e\026\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\036\uff9e" +
    "\037\uff9e\001\002\000\052\003\uff98\007\uff98\010\uff98\011" +
    "\uff98\012\uff98\014\uff98\015\uff98\017\uff98\021\uff98\024\uff98" +
    "\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033" +
    "\uff98\034\uff98\036\uff98\037\uff98\001\002\000\050\003\uffa2" +
    "\007\uffa2\010\uffa2\011\151\012\150\015\147\017\uffa2\021" +
    "\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\036\uffa2\037\uffa2\001\002\000" +
    "\042\003\uffa5\007\144\010\145\017\uffa5\021\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\036\uffa5\037\uffa5\001\002\000\036\003\uffaa" +
    "\017\uffaa\021\uffaa\024\142\025\141\026\140\027\137\030" +
    "\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\036\uffaa\037\uffaa" +
    "\001\002\000\026\003\uffad\017\uffad\021\uffad\030\134\031" +
    "\135\032\uffad\033\uffad\034\uffad\036\uffad\037\uffad\001\002" +
    "\000\022\003\uffaf\017\uffaf\021\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\036\132\037\uffaf\001\002\000\010\003\163\033\162" +
    "\037\130\001\002\000\052\003\uff94\007\uff94\010\uff94\011" +
    "\uff94\012\uff94\014\uff94\015\uff94\017\uff94\021\uff94\024\uff94" +
    "\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033" +
    "\uff94\034\uff94\036\uff94\037\uff94\001\002\000\032\004\076" +
    "\005\115\006\113\010\070\011\046\016\110\040\071\050" +
    "\100\051\111\052\107\053\072\054\112\001\002\000\052" +
    "\003\uff97\007\uff97\010\uff97\011\uff97\012\uff97\014\uff97\015" +
    "\uff97\017\uff97\021\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\036\uff97\037" +
    "\uff97\001\002\000\020\004\014\041\011\042\064\043\024" +
    "\044\025\045\013\047\017\001\002\000\052\003\uff95\007" +
    "\uff95\010\uff95\011\uff95\012\uff95\014\uff95\015\uff95\017\uff95" +
    "\021\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031" +
    "\uff95\032\uff95\033\uff95\034\uff95\036\uff95\037\uff95\001\002" +
    "\000\056\003\uff92\007\uff92\010\uff92\011\uff92\012\uff92\014" +
    "\uff92\015\uff92\017\uff92\020\065\021\uff92\024\uff92\025\uff92" +
    "\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034" +
    "\uff92\035\066\036\uff92\037\uff92\001\002\000\052\003\uff96" +
    "\007\uff96\010\uff96\011\uff96\012\uff96\014\uff96\015\uff96\017" +
    "\uff96\021\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\032\uff96\033\uff96\034\uff96\036\uff96\037\uff96\001" +
    "\002\000\010\011\121\016\117\025\120\001\002\000\004" +
    "\017\125\001\002\000\006\005\122\024\123\001\002\000" +
    "\012\004\uffea\011\uffea\016\uffea\025\uffea\001\002\000\004" +
    "\024\124\001\002\000\012\004\uffe8\011\uffe8\016\uffe8\025" +
    "\uffe8\001\002\000\012\004\uffe9\011\uffe9\016\uffe9\025\uffe9" +
    "\001\002\000\052\003\uff90\007\uff90\010\uff90\011\uff90\012" +
    "\uff90\014\uff90\015\uff90\017\uff90\021\uff90\024\uff90\025\uff90" +
    "\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034" +
    "\uff90\036\uff90\037\uff90\001\002\000\006\017\127\037\130" +
    "\001\002\000\052\003\uff8f\007\uff8f\010\uff8f\011\uff8f\012" +
    "\uff8f\014\uff8f\015\uff8f\017\uff8f\021\uff8f\024\uff8f\025\uff8f" +
    "\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034" +
    "\uff8f\036\uff8f\037\uff8f\001\002\000\032\004\076\005\115" +
    "\006\113\010\070\011\046\016\110\040\071\050\100\051" +
    "\111\052\107\053\072\054\112\001\002\000\022\003\uffb0" +
    "\017\uffb0\021\uffb0\032\uffb0\033\uffb0\034\uffb0\036\132\037" +
    "\uffb0\001\002\000\032\004\076\005\115\006\113\010\070" +
    "\011\046\016\110\040\071\050\100\051\111\052\107\053" +
    "\072\054\112\001\002\000\026\003\uffae\017\uffae\021\uffae" +
    "\030\134\031\135\032\uffae\033\uffae\034\uffae\036\uffae\037" +
    "\uffae\001\002\000\032\004\076\005\115\006\113\010\070" +
    "\011\046\016\110\040\071\050\100\051\111\052\107\053" +
    "\072\054\112\001\002\000\032\004\076\005\115\006\113" +
    "\010\070\011\046\016\110\040\071\050\100\051\111\052" +
    "\107\053\072\054\112\001\002\000\036\003\uffac\017\uffac" +
    "\021\uffac\024\142\025\141\026\140\027\137\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\034\uffac\036\uffac\037\uffac\001\002" +
    "\000\032\004\076\005\115\006\113\010\070\011\046\016" +
    "\110\040\071\050\100\051\111\052\107\053\072\054\112" +
    "\001\002\000\032\004\076\005\115\006\113\010\070\011" +
    "\046\016\110\040\071\050\100\051\111\052\107\053\072" +
    "\054\112\001\002\000\032\004\076\005\115\006\113\010" +
    "\070\011\046\016\110\040\071\050\100\051\111\052\107" +
    "\053\072\054\112\001\002\000\032\004\076\005\115\006" +
    "\113\010\070\011\046\016\110\040\071\050\100\051\111" +
    "\052\107\053\072\054\112\001\002\000\042\003\uffa9\007" +
    "\144\010\145\017\uffa9\021\uffa9\024\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\036" +
    "\uffa9\037\uffa9\001\002\000\032\004\076\005\115\006\113" +
    "\010\070\011\046\016\110\040\071\050\100\051\111\052" +
    "\107\053\072\054\112\001\002\000\032\004\076\005\115" +
    "\006\113\010\070\011\046\016\110\040\071\050\100\051" +
    "\111\052\107\053\072\054\112\001\002\000\050\003\uffa3" +
    "\007\uffa3\010\uffa3\011\151\012\150\015\147\017\uffa3\021" +
    "\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\036\uffa3\037\uffa3\001\002\000" +
    "\032\004\076\005\115\006\113\010\070\011\046\016\110" +
    "\040\071\050\100\051\111\052\107\053\072\054\112\001" +
    "\002\000\032\004\076\005\115\006\113\010\070\011\046" +
    "\016\110\040\071\050\100\051\111\052\107\053\072\054" +
    "\112\001\002\000\032\004\076\005\115\006\113\010\070" +
    "\011\046\016\110\040\071\050\100\051\111\052\107\053" +
    "\072\054\112\001\002\000\050\003\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\015\uffa1\017\uffa1\021\uffa1\024\uffa1\025" +
    "\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1" +
    "\034\uffa1\036\uffa1\037\uffa1\001\002\000\050\003\uffa0\007" +
    "\uffa0\010\uffa0\011\uffa0\012\uffa0\015\uffa0\017\uffa0\021\uffa0" +
    "\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\036\uffa0\037\uffa0\001\002\000\050" +
    "\003\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\015\uff9f\017" +
    "\uff9f\021\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\034\uff9f\036\uff9f\037\uff9f\001" +
    "\002\000\050\003\uffa4\007\uffa4\010\uffa4\011\151\012\150" +
    "\015\147\017\uffa4\021\uffa4\024\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\036\uffa4" +
    "\037\uffa4\001\002\000\042\003\uffa8\007\144\010\145\017" +
    "\uffa8\021\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\036\uffa8\037\uffa8\001" +
    "\002\000\042\003\uffa7\007\144\010\145\017\uffa7\021\uffa7" +
    "\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\036\uffa7\037\uffa7\001\002\000\042" +
    "\003\uffa6\007\144\010\145\017\uffa6\021\uffa6\024\uffa6\025" +
    "\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6" +
    "\034\uffa6\036\uffa6\037\uffa6\001\002\000\036\003\uffab\017" +
    "\uffab\021\uffab\024\142\025\141\026\140\027\137\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\036\uffab\037\uffab\001" +
    "\002\000\044\003\uffc9\004\uffc9\011\uffc9\023\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\045\uffc9\047\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\063\uffc9\066\uffc9\070\uffc9\072\uffc9\001\002" +
    "\000\044\003\uffc8\004\uffc8\011\uffc8\023\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\047\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\063\uffc8\066\uffc8\070\uffc8\072\uffc8\001\002\000" +
    "\036\004\076\005\115\006\113\010\070\011\046\016\110" +
    "\017\uffe0\032\uffe0\040\071\050\100\051\111\052\107\053" +
    "\072\054\112\001\002\000\010\017\uffe1\032\uffe1\037\130" +
    "\001\002\000\006\017\170\032\167\001\002\000\032\004" +
    "\076\005\115\006\113\010\070\011\046\016\110\040\071" +
    "\050\100\051\111\052\107\053\072\054\112\001\002\000" +
    "\052\003\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\014\uffb1" +
    "\015\uffb1\017\uffb1\021\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\036\uffb1" +
    "\037\uffb1\001\002\000\010\017\uffe2\032\uffe2\037\130\001" +
    "\002\000\026\004\076\005\115\006\113\011\046\016\110" +
    "\050\100\051\111\052\107\053\072\054\112\001\002\000" +
    "\052\003\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\014\uff9a" +
    "\015\uff9a\017\uff9a\021\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\036\uff9a" +
    "\037\uff9a\001\002\000\050\003\uff9c\007\uff9c\010\uff9c\011" +
    "\uff9c\012\uff9c\015\uff9c\017\uff9c\021\uff9c\024\uff9c\025\uff9c" +
    "\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\036\uff9c\037\uff9c\001\002\000\050\003\uff9d\007\uff9d" +
    "\010\uff9d\011\uff9d\012\uff9d\015\uff9d\017\uff9d\021\uff9d\024" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\033\uff9d\034\uff9d\036\uff9d\037\uff9d\001\002\000\060\003" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\017\uffd1\020\uffd1\021\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\001\002\000\006\021\200\037" +
    "\130\001\002\000\060\003\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\001" +
    "\002\000\004\022\032\001\002\000\004\041\203\001\002" +
    "\000\004\004\204\001\002\000\004\013\205\001\002\000" +
    "\032\004\076\005\115\006\113\010\070\011\046\016\110" +
    "\040\071\050\100\051\111\052\107\053\072\054\112\001" +
    "\002\000\006\033\207\037\130\001\002\000\032\004\076" +
    "\005\115\006\113\010\070\011\046\016\110\040\071\050" +
    "\100\051\111\052\107\053\072\054\112\001\002\000\006" +
    "\033\211\037\130\001\002\000\006\004\213\011\046\001" +
    "\002\000\010\013\214\020\065\035\066\001\002\000\060" +
    "\003\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\017\uffcf\020\uffcf\021\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\001\002\000\032\004\076" +
    "\005\115\006\113\010\070\011\046\016\110\040\071\050" +
    "\100\051\111\052\107\053\072\054\112\001\002\000\006" +
    "\017\216\037\130\001\002\000\004\022\032\001\002\000" +
    "\044\003\uffc2\004\uffc2\011\uffc2\023\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\047\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\063\uffc2\066\uffc2\070\uffc2\072\uffc2\001\002\000\044" +
    "\003\uffc1\004\uffc1\011\uffc1\023\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\047\uffc1\056\uffc1\057\uffc1\060\uffc1" +
    "\063\uffc1\066\uffc1\070\uffc1\072\uffc1\001\002\000\044\003" +
    "\uffd3\004\uffd3\011\uffd3\023\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\045\uffd3\047\uffd3\056\uffd3\057\uffd3\060\uffd3\063" +
    "\uffd3\066\uffd3\070\uffd3\072\uffd3\001\002\000\032\004\076" +
    "\005\115\006\113\010\070\011\046\016\110\040\071\050" +
    "\100\051\111\052\107\053\072\054\112\001\002\000\006" +
    "\017\224\037\130\001\002\000\006\003\226\033\225\001" +
    "\002\000\044\003\uffb8\004\uffb8\011\uffb8\023\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\047\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\063\uffb8\066\uffb8\070\uffb8\072\uffb8\001\002" +
    "\000\044\003\uffb7\004\uffb7\011\uffb7\023\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\047\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\063\uffb7\066\uffb7\070\uffb7\072\uffb7\001\002\000" +
    "\060\003\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\017\uffce\020\uffce\021\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\001\002\000\006\004" +
    "\213\011\046\001\002\000\010\017\232\020\065\035\066" +
    "\001\002\000\060\003\uffcd\007\uffcd\010\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\001\002" +
    "\000\010\003\235\013\236\033\234\001\002\000\044\003" +
    "\uffcc\004\uffcc\011\uffcc\023\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\047\uffcc\056\uffcc\057\uffcc\060\uffcc\063" +
    "\uffcc\066\uffcc\070\uffcc\072\uffcc\001\002\000\044\003\uffca" +
    "\004\uffca\011\uffca\023\uffca\041\uffca\042\uffca\043\uffca\044" +
    "\uffca\045\uffca\047\uffca\056\uffca\057\uffca\060\uffca\063\uffca" +
    "\066\uffca\070\uffca\072\uffca\001\002\000\032\004\076\005" +
    "\115\006\113\010\070\011\046\016\110\040\071\050\100" +
    "\051\111\052\107\053\072\054\112\001\002\000\006\033" +
    "\240\037\130\001\002\000\044\003\uffcb\004\uffcb\011\uffcb" +
    "\023\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\047" +
    "\uffcb\056\uffcb\057\uffcb\060\uffcb\063\uffcb\066\uffcb\070\uffcb" +
    "\072\uffcb\001\002\000\004\022\032\001\002\000\032\004" +
    "\076\005\115\006\113\010\070\011\046\016\110\040\071" +
    "\050\100\051\111\052\107\053\072\054\112\001\002\000" +
    "\006\017\244\037\130\001\002\000\004\022\032\001\002" +
    "\000\046\003\uffc7\004\uffc7\011\uffc7\023\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\047\uffc7\056\uffc7\057\uffc7" +
    "\060\uffc7\062\246\063\uffc7\066\uffc7\070\uffc7\072\uffc7\001" +
    "\002\000\004\022\032\001\002\000\044\003\uffc6\004\uffc6" +
    "\011\uffc6\023\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\047\uffc6\056\uffc6\057\uffc6\060\uffc6\063\uffc6\066\uffc6" +
    "\070\uffc6\072\uffc6\001\002\000\044\003\uffc5\004\uffc5\011" +
    "\uffc5\023\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\047\uffc5\056\uffc5\057\uffc5\060\uffc5\063\uffc5\066\uffc5\070" +
    "\uffc5\072\uffc5\001\002\000\004\022\277\001\002\000\032" +
    "\004\076\005\115\006\113\010\070\011\046\016\110\040" +
    "\071\050\100\051\111\052\107\053\072\054\112\001\002" +
    "\000\006\017\254\037\130\001\002\000\004\022\255\001" +
    "\002\000\006\003\260\065\261\001\002\000\006\065\uffbc" +
    "\067\uffbc\001\002\000\006\065\261\067\271\001\002\000" +
    "\004\023\270\001\002\000\032\004\076\005\115\006\113" +
    "\010\070\011\046\016\110\040\071\050\100\051\111\052" +
    "\107\053\072\054\112\001\002\000\006\034\263\037\130" +
    "\001\002\000\042\003\uffdd\004\uffdd\011\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\045\uffdd\047\uffdd\056\uffdd\057\uffdd" +
    "\060\uffdd\063\uffdd\066\uffdd\070\uffdd\072\uffdd\001\002\000" +
    "\042\003\054\004\041\011\046\041\011\042\064\043\024" +
    "\044\025\045\013\047\017\056\036\057\062\060\043\063" +
    "\042\066\265\070\040\072\053\001\002\000\006\003\267" +
    "\033\266\001\002\000\006\065\uffbb\067\uffbb\001\002\000" +
    "\006\065\uffba\067\uffba\001\002\000\044\003\uffbf\004\uffbf" +
    "\011\uffbf\023\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045" +
    "\uffbf\047\uffbf\056\uffbf\057\uffbf\060\uffbf\063\uffbf\066\uffbf" +
    "\070\uffbf\072\uffbf\001\002\000\004\034\275\001\002\000" +
    "\004\023\274\001\002\000\006\065\uffbd\067\uffbd\001\002" +
    "\000\044\003\uffc0\004\uffc0\011\uffc0\023\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\047\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\063\uffc0\066\uffc0\070\uffc0\072\uffc0\001\002\000" +
    "\042\003\uffdd\004\uffdd\011\uffdd\023\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\044\uffdd\045\uffdd\047\uffdd\056\uffdd\057\uffdd\060" +
    "\uffdd\063\uffdd\070\uffdd\072\uffdd\001\002\000\042\003\054" +
    "\004\041\011\046\023\uffb9\041\011\042\064\043\024\044" +
    "\025\045\013\047\017\056\036\057\062\060\043\063\042" +
    "\070\040\072\053\001\002\000\004\065\261\001\002\000" +
    "\006\065\261\067\271\001\002\000\004\023\302\001\002" +
    "\000\044\003\uffbe\004\uffbe\011\uffbe\023\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\047\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\063\uffbe\066\uffbe\070\uffbe\072\uffbe\001\002\000" +
    "\044\003\uffb5\004\uffb5\011\uffb5\023\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\047\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\063\uffb5\066\uffb5\070\uffb5\072\uffb5\001\002\000\006" +
    "\033\306\037\130\001\002\000\044\003\uffb4\004\uffb4\011" +
    "\uffb4\023\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\047\uffb4\056\uffb4\057\uffb4\060\uffb4\063\uffb4\066\uffb4\070" +
    "\uffb4\072\uffb4\001\002\000\044\003\uffb6\004\uffb6\011\uffb6" +
    "\023\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\047" +
    "\uffb6\056\uffb6\057\uffb6\060\uffb6\063\uffb6\066\uffb6\070\uffb6" +
    "\072\uffb6\001\002\000\004\022\032\001\002\000\032\004" +
    "\076\005\115\006\113\010\070\011\046\016\110\040\071" +
    "\050\100\051\111\052\107\053\072\054\112\001\002\000" +
    "\006\017\312\037\130\001\002\000\004\022\032\001\002" +
    "\000\044\003\uffc4\004\uffc4\011\uffc4\023\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\047\uffc4\056\uffc4\057\uffc4" +
    "\060\uffc4\063\uffc4\066\uffc4\070\uffc4\072\uffc4\001\002\000" +
    "\044\003\uffc3\004\uffc3\011\uffc3\023\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\047\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\063\uffc3\066\uffc3\070\uffc3\072\uffc3\001\002\000\044" +
    "\003\uffb3\004\uffb3\011\uffb3\023\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\047\uffb3\056\uffb3\057\uffb3\060\uffb3" +
    "\063\uffb3\066\uffb3\070\uffb3\072\uffb3\001\002\000\044\003" +
    "\uffb2\004\uffb2\011\uffb2\023\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\047\uffb2\056\uffb2\057\uffb2\060\uffb2\063" +
    "\uffb2\066\uffb2\070\uffb2\072\uffb2\001\002\000\004\022\320" +
    "\001\002\000\020\004\014\041\011\042\064\043\024\044" +
    "\025\045\013\047\017\001\002\000\022\004\014\023\323" +
    "\041\011\042\064\043\024\044\025\045\013\047\017\001" +
    "\002\000\022\004\ufff2\023\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\047\ufff2\001\002\000\006\003\326\033" +
    "\325\001\002\000\022\004\ufff3\023\ufff3\041\ufff3\042\ufff3" +
    "\043\ufff3\044\ufff3\045\ufff3\047\ufff3\001\002\000\026\003" +
    "\ufff5\004\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\064\ufff5\001\002\000\026\003\ufff4\004" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4" +
    "\047\ufff4\064\ufff4\001\002\000\004\016\330\001\002\000" +
    "\024\004\014\017\uffe3\032\uffe3\041\011\042\064\043\024" +
    "\044\025\045\013\047\017\001\002\000\010\004\340\011" +
    "\121\025\120\001\002\000\006\017\334\032\333\001\002" +
    "\000\020\004\014\041\011\042\064\043\024\044\025\045" +
    "\013\047\017\001\002\000\004\022\032\001\002\000\026" +
    "\003\uffe7\004\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\064\uffe7\001\002\000\010\004\337" +
    "\011\121\025\120\001\002\000\006\017\uffe5\032\uffe5\001" +
    "\002\000\006\017\uffe4\032\uffe4\001\002\000\004\033\354" +
    "\001\002\000\004\013\343\001\002\000\004\022\344\001" +
    "\002\000\004\004\345\001\002\000\006\023\ufff6\032\ufff6" +
    "\001\002\000\006\023\350\032\347\001\002\000\004\004" +
    "\353\001\002\000\006\003\352\033\351\001\002\000\026" +
    "\003\ufffa\004\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\064\ufffa\001\002\000\026\003\ufff9" +
    "\004\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046" +
    "\ufff9\047\ufff9\064\ufff9\001\002\000\006\023\ufff7\032\ufff7" +
    "\001\002\000\026\003\ufff8\004\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\064\ufff8\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\006\002\004\003\003\001\001\000\014\004" +
    "\017\006\007\010\021\011\022\047\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\030" +
    "\001\001\000\002\001\001\000\004\015\032\001\001\000" +
    "\036\014\046\017\050\020\056\021\047\022\057\023\033" +
    "\024\055\030\051\031\036\032\044\033\062\034\060\035" +
    "\034\047\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\033\113\034" +
    "\060\035\072\036\303\037\104\040\103\041\102\042\101" +
    "\043\100\044\076\045\074\046\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\033\113\034\060\035\072\036\176\037\104" +
    "\040\103\041\102\042\101\043\100\044\076\045\074\046" +
    "\073\001\001\000\002\001\001\000\032\033\113\034\060" +
    "\035\072\036\105\037\104\040\103\041\102\042\101\043" +
    "\100\044\076\045\074\046\073\001\001\000\016\033\113" +
    "\034\060\035\072\044\174\045\074\046\073\001\001\000" +
    "\016\033\113\034\060\035\072\044\173\045\074\046\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\033\113\034\060\035" +
    "\072\036\125\037\104\040\103\041\102\042\101\043\100" +
    "\044\076\045\074\046\073\001\001\000\002\001\001\000" +
    "\004\047\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\033\113\034\060\035\072" +
    "\037\130\040\103\041\102\042\101\043\100\044\076\045" +
    "\074\046\073\001\001\000\002\001\001\000\026\033\113" +
    "\034\060\035\072\040\132\041\102\042\101\043\100\044" +
    "\076\045\074\046\073\001\001\000\002\001\001\000\024" +
    "\033\113\034\060\035\072\041\160\042\101\043\100\044" +
    "\076\045\074\046\073\001\001\000\024\033\113\034\060" +
    "\035\072\041\135\042\101\043\100\044\076\045\074\046" +
    "\073\001\001\000\002\001\001\000\022\033\113\034\060" +
    "\035\072\042\157\043\100\044\076\045\074\046\073\001" +
    "\001\000\022\033\113\034\060\035\072\042\156\043\100" +
    "\044\076\045\074\046\073\001\001\000\022\033\113\034" +
    "\060\035\072\042\155\043\100\044\076\045\074\046\073" +
    "\001\001\000\022\033\113\034\060\035\072\042\142\043" +
    "\100\044\076\045\074\046\073\001\001\000\002\001\001" +
    "\000\020\033\113\034\060\035\072\043\154\044\076\045" +
    "\074\046\073\001\001\000\020\033\113\034\060\035\072" +
    "\043\145\044\076\045\074\046\073\001\001\000\002\001" +
    "\001\000\016\033\113\034\060\035\072\044\153\045\074" +
    "\046\073\001\001\000\016\033\113\034\060\035\072\044" +
    "\152\045\074\046\073\001\001\000\016\033\113\034\060" +
    "\035\072\044\151\045\074\046\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\013\165\033\113\034\060\035\072\036\164\037\104\040" +
    "\103\041\102\042\101\043\100\044\076\045\074\046\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\033" +
    "\113\034\060\035\072\036\170\037\104\040\103\041\102" +
    "\042\101\043\100\044\076\045\074\046\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\033\113\034\060" +
    "\035\072\046\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\033\113" +
    "\034\060\035\072\036\205\037\104\040\103\041\102\042" +
    "\101\043\100\044\076\045\074\046\073\001\001\000\002" +
    "\001\001\000\032\033\113\034\060\035\072\036\207\037" +
    "\104\040\103\041\102\042\101\043\100\044\076\045\074" +
    "\046\073\001\001\000\002\001\001\000\006\033\211\034" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\033\113\034\060\035\072\036\214\037\104\040\103\041" +
    "\102\042\101\043\100\044\076\045\074\046\073\001\001" +
    "\000\002\001\001\000\004\016\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\033\113" +
    "\034\060\035\072\036\222\037\104\040\103\041\102\042" +
    "\101\043\100\044\076\045\074\046\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\230\034\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\033\113\034\060" +
    "\035\072\036\236\037\104\040\103\041\102\042\101\043" +
    "\100\044\076\045\074\046\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\247\001\001\000\032\033" +
    "\113\034\060\035\072\036\242\037\104\040\103\041\102" +
    "\042\101\043\100\044\076\045\074\046\073\001\001\000" +
    "\002\001\001\000\004\016\244\001\001\000\002\001\001" +
    "\000\004\016\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\033\113\034\060\035\072" +
    "\036\252\037\104\040\103\041\102\042\101\043\100\044" +
    "\076\045\074\046\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\256\026\255\001\001\000\002\001" +
    "\001\000\006\026\272\027\271\001\001\000\002\001\001" +
    "\000\032\033\113\034\060\035\072\036\261\037\104\040" +
    "\103\041\102\042\101\043\100\044\076\045\074\046\073" +
    "\001\001\000\002\001\001\000\004\015\263\001\001\000" +
    "\036\014\046\017\050\020\056\021\047\022\057\023\033" +
    "\024\055\030\051\031\036\032\044\033\062\034\060\035" +
    "\034\047\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\275\001\001\000\036\014\046\017\050\020\056\021" +
    "\047\022\057\023\033\024\055\030\051\031\036\032\044" +
    "\033\062\034\060\035\034\047\043\001\001\000\006\025" +
    "\277\026\255\001\001\000\006\026\272\027\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\313\001\001\000\032\033\113\034\060\035\072\036" +
    "\310\037\104\040\103\041\102\042\101\043\100\044\076" +
    "\045\074\046\073\001\001\000\002\001\001\000\004\016" +
    "\312\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\320\017\321\047\043\001\001\000\006\017\323\047\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\331\047\330\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\335\001\001\000\004\016\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\345\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= Entrada FuncionMain 
            {
              Programa RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Fmain fmain = (Fmain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Programa(definiciones, fmain); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= Entrada error 
            {
              Programa RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 System.out.println("Error: No se encuentra funcion main"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Entrada ::= Entrada Struct 
            {
              ListaDefiniciones RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StructClass str = (StructClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = definiciones; definiciones.addStruct(str); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Entrada ::= Entrada Enumerado 
            {
              ListaDefiniciones RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		EnumClass en = (EnumClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = definiciones; definiciones.addEnum(en); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Entrada ::= Entrada Funcion 
            {
              ListaDefiniciones RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = definiciones; definiciones.addFuncion(f); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Entrada ::= 
            {
              ListaDefiniciones RESULT =null;
		 RESULT = new ListaDefiniciones(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Enumerado ::= ENUM IDEN IGUAL LAP DentroEnumerado LCIERRE PUNTOYCOMA 
            {
              EnumClass RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<String> valores = (List<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new EnumClass(nombre.lexema,valores); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Enumerado",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Enumerado ::= ENUM IDEN IGUAL LAP DentroEnumerado LCIERRE error 
            {
              EnumClass RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<String> valores = (List<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 System.out.println("Error: Enumerado falta ;"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Enumerado",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Enumerado ::= ENUM error PUNTOYCOMA 
            {
              EnumClass RESULT =null;
		 System.out.println("Error: Enumerado en cuerpo"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Enumerado",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DentroEnumerado ::= DentroEnumerado COMA IDEN 
            {
              List<String> RESULT =null;
		List<String> restoValores = (List<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue valor = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = restoValores; restoValores.add(valor.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroEnumerado",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DentroEnumerado ::= IDEN 
            {
              List<String> RESULT =null;
		TokenValue valor = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(valor.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroEnumerado",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Struct ::= STRUCT IDEN LAP DentroStruct LCIERRE PUNTOYCOMA 
            {
              StructClass RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<DecClass> valores = (List<DecClass>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new StructClass(nombre.lexema,valores); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Struct",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Struct ::= STRUCT IDEN LAP DentroStruct LCIERRE error 
            {
              StructClass RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<DecClass> valores = (List<DecClass>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 System.out.println("Error: Struct falta ;"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Struct",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DentroStruct ::= DentroStruct Declaracion 
            {
              List<DecClass> RESULT =null;
		List<DecClass> resto = (List<DecClass>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DecClass decl = (DecClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = resto; resto.add(decl); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroStruct",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DentroStruct ::= Declaracion 
            {
              List<DecClass> RESULT =null;
		DecClass decl = (DecClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<DecClass>(); RESULT.add(decl); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroStruct",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= INT 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= VOID 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= FLOAT 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= BOOL 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= CHAR 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= STRING 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= IDEN 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoEstructuraClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= Tipo POR 
            {
              TipoClass RESULT =null;
		TipoClass tipo = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoPunteroClass(tipo); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= Tipo MENOR ENT MAYOR 
            {
              TipoClass RESULT =null;
		TipoClass tipo = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue num = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoArrayClass(tipo,num.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= Tipo MENOR MAYOR 
            {
              TipoClass RESULT =null;
		TipoClass tipo = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new TipoArrayClass(tipo, null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Funcion ::= Tipo IDEN PAP Args PCIERRE BloqueInstrucciones 
            {
              Funcion RESULT =null;
		TipoClass tipo = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<ParTipoIden> args = (List<ParTipoIden>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Funcion(tipo, nombre.lexema, args, ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FuncionMain ::= VOID MAIN PAP PCIERRE BloqueInstrucciones 
            {
              Fmain RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Fmain("main", ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FuncionMain",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Args ::= Args COMA Tipo IDEN 
            {
              List<ParTipoIden> RESULT =null;
		List<ParTipoIden> args = (List<ParTipoIden>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = args; args.add(new ParTipoIden(t,iden.lexema)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Args ::= Tipo IDEN 
            {
              List<ParTipoIden> RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<ParTipoIden>(); RESULT.add(new ParTipoIden(t,iden.lexema)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Args ::= 
            {
              List<ParTipoIden> RESULT =null;
		 RESULT = new ArrayList<ParTipoIden>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Params ::= Params COMA E0 
            {
              List<Expresion> RESULT =null;
		List<Expresion> params = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = params ; params.add(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Params ::= E0 
            {
              List<Expresion> RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT =  new ArrayList<Expresion>(); RESULT.add(exp);  
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Params ::= 
            {
              List<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BloqueInstrucciones ::= LAP Instrucciones LCIERRE 
            {
              List<Ins> RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = ins; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueInstrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instrucciones ::= Instrucciones Instruccion 
            {
              List<Ins> RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Ins elem = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ins; ins.add(elem); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instrucciones ::= 
            {
              List<Ins> RESULT =null;
		 RESULT = new ArrayList<Ins>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instruccion ::= Declaracion 
            {
              Ins RESULT =null;
		DecClass elem = (DecClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion ::= Asignacion 
            {
              Ins RESULT =null;
		AsigClass elem = (AsigClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruccion ::= If 
            {
              Ins RESULT =null;
		IfClass elem = (IfClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instruccion ::= While 
            {
              Ins RESULT =null;
		WhileClass elem = (WhileClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instruccion ::= For 
            {
              Ins RESULT =null;
		ForClass elem = (ForClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Instruccion ::= Switch 
            {
              Ins RESULT =null;
		SwitchClass elem = (SwitchClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Instruccion ::= Print 
            {
              Ins RESULT =null;
		PrintClass elem = (PrintClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Instruccion ::= Return 
            {
              Ins RESULT =null;
		ReturnClass elem = (ReturnClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Instruccion ::= InsLlamadaFuncion 
            {
              Ins RESULT =null;
		FuncallClass elem = (FuncallClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Instruccion ::= error PUNTOYCOMA 
            {
              Ins RESULT =null;
		 System.out.println("Error: Instruccion"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Acceso0 ::= Acceso0 CAP E0 CCIERRE 
            {
              Acceso RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new AccesoArray(ref,exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Acceso0 ::= Acceso0 PUNTO IDEN 
            {
              Acceso RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue campo = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new AccesoStruct(ref,campo.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Acceso0 ::= Acceso1 
            {
              Acceso RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ref; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Acceso1 ::= IDEN 
            {
              Acceso RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new AccesoVar(nombre.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Acceso1 ::= POR Acceso1 
            {
              Acceso RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new AccesoPuntero(ref); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Acceso1 ::= POR PAP Acceso0 PCIERRE 
            {
              Acceso RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new AccesoPuntero(ref); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Declaracion ::= Tipo IDEN PUNTOYCOMA 
            {
              DecClass RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DecClass(t,nombre.lexema,null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Declaracion ::= Tipo IDEN IGUAL E0 PUNTOYCOMA 
            {
              DecClass RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DecClass(t,nombre.lexema,exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Declaracion ::= Tipo IDEN error 
            {
              DecClass RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 System.out.println("Error: Declaracion"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Asignacion ::= Acceso0 IGUAL E0 PUNTOYCOMA 
            {
              AsigClass RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new AsigClass(ref, exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Asignacion ::= Acceso0 IGUAL E0 error 
            {
              AsigClass RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 System.out.println("Error: Falta ;"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // If ::= IF PAP E0 PCIERRE BloqueInstrucciones 
            {
              IfClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new IfClass(exp,ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // If ::= IF PAP E0 PCIERRE BloqueInstrucciones ELSE BloqueInstrucciones 
            {
              IfClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> inselse = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new IfClass(exp,ins,inselse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // If ::= IF error BloqueInstrucciones 
            {
              IfClass RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 System.out.println("Error: Condicion del if"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // While ::= WHILE PAP E0 PCIERRE BloqueInstrucciones 
            {
              WhileClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new WhileClass(exp,ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("While",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // While ::= WHILE error BloqueInstrucciones 
            {
              WhileClass RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 System.out.println("Error: Condicion del while"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("While",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // For ::= FOR PAP INT IDEN IGUAL E0 PUNTOYCOMA E0 PUNTOYCOMA Acceso0 IGUAL E0 PCIERRE BloqueInstrucciones 
            {
              ForClass RESULT =null;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-11)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-10)).value;
		Expresion expIni = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expresion expCond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ForClass(new DecClass(new TipoBasicoClass(t.lexema),nombre.lexema,expIni),expCond,new AsigClass(ref,exp),ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("For",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // For ::= FOR error BloqueInstrucciones 
            {
              ForClass RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 System.out.println("Error: Condicion del for"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("For",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Switch ::= SWITCH PAP E0 PCIERRE LAP BloqueCase Default LCIERRE 
            {
              SwitchClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<CaseSwitch> casos = (List<CaseSwitch>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CaseSwitch def = (CaseSwitch)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 casos.add(def); RESULT = new SwitchClass(exp,casos); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Switch",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Switch ::= SWITCH PAP E0 PCIERRE LAP error LCIERRE 
            {
              SwitchClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		 System.out.println("Error: Cuerpo switch"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Switch",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Switch ::= SWITCH error LAP BloqueCase Default LCIERRE 
            {
              SwitchClass RESULT =null;
		List<CaseSwitch> casos = (List<CaseSwitch>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CaseSwitch def = (CaseSwitch)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 System.out.println("Error: Condicion switch"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Switch",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BloqueCase ::= BloqueCase Case 
            {
              List<CaseSwitch> RESULT =null;
		List<CaseSwitch> casos = (List<CaseSwitch>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CaseSwitch caso = (CaseSwitch)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = casos; casos.add(caso); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueCase",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BloqueCase ::= Case 
            {
              List<CaseSwitch> RESULT =null;
		CaseSwitch caso = (CaseSwitch)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<CaseSwitch>(); RESULT.add(caso); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueCase",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Case ::= CASE E0 DOSPUNTOS Instrucciones BREAK PUNTOYCOMA 
            {
              CaseSwitch RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new CaseSwitch(exp,ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Case",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Case ::= CASE E0 DOSPUNTOS Instrucciones BREAK error 
            {
              CaseSwitch RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 System.out.println("Error: Falta ;"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Case",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Default ::= DEFAULT DOSPUNTOS Instrucciones 
            {
              CaseSwitch RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new CaseSwitch(ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Default",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Print ::= PRINT PAP E0 PCIERRE PUNTOYCOMA 
            {
              PrintClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new PrintClass(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Print",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Print ::= PRINT PAP E0 PCIERRE error 
            {
              PrintClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 System.out.println("Error: Falta ;"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Print",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Return ::= RETURN E0 PUNTOYCOMA 
            {
              ReturnClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ReturnClass(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Return",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Return ::= RETURN PUNTOYCOMA 
            {
              ReturnClass RESULT =null;
		 RESULT = new ReturnClass(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Return",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Return ::= RETURN error 
            {
              ReturnClass RESULT =null;
		 System.out.println("Error: Return"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Return",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // InsLlamadaFuncion ::= LlamadaFuncion PUNTOYCOMA 
            {
              FuncallClass RESULT =null;
		FuncallExp funcion = (FuncallExp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new FuncallClass(funcion); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsLlamadaFuncion",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // InsLlamadaFuncion ::= LlamadaFuncion error 
            {
              FuncallClass RESULT =null;
		FuncallExp funcion = (FuncallExp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 System.out.println("Error: Falta ;"); RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsLlamadaFuncion",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LlamadaFuncion ::= IDEN PAP Params PCIERRE 
            {
              FuncallExp RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<Expresion> params = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new FuncallExp(nombre.lexema,params); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E0 ::= E0 OR E1 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpOr(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E0 ::= E1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E1 ::= E1 AND E2 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpAnd(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E2 ::= E2 IGUALDAD E3 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpIgualdad(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E2 ::= E2 DISTINTO E3 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpDesigualdad(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E3 ::= E3 MAYOR E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMayor(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E3 ::= E3 MENOR E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMenor(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E3 ::= E3 MAYORIGUAL E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMayorigual(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E3 ::= E3 MENORIGUAL E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMenorigual(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E4 ::= E4 MAS E5 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpSuma(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E4 ::= E4 MENOS E5 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpResta(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E5 ::= E5 POR E6 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMult(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E5 ::= E5 DIV E6 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpDiv(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E5 ::= E5 MOD E6 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpModulo(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E5 ::= E6 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E6 ::= MENOS E6 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpCambioSigno(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E6 ::= NEG E6 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpNegar(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E6 ::= E7 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E7 ::= E7 POTENCIA E8 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpPotencia(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E7 ::= E8 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E8 ::= TRUE 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema, new TipoBasicoClass("bool")); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E8 ::= FALSE 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema, new TipoBasicoClass("bool")); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E8 ::= ENT 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema, new TipoBasicoClass("int")); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E8 ::= REAL 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema, new TipoBasicoClass("float")); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E8 ::= CARACTER 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema, new TipoBasicoClass("char")); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E8 ::= CADENA 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema, new TipoBasicoClass("string")); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E8 ::= Acceso0 
            {
              Expresion RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ref; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E8 ::= LlamadaFuncion 
            {
              Expresion RESULT =null;
		FuncallExp llamada = (FuncallExp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = llamada; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E8 ::= NEW Tipo PAP PCIERRE 
            {
              Expresion RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new NewExp(t); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E8 ::= PAP E0 PCIERRE 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

