
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Apr 26 18:36:50 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.*;
import asint.*;
import ast.*;
import ast.estructuras.*;
import ast.expresiones.*;
import ast.funciones.*;
import ast.instrucciones.*;
import ast.tipos.*;
import errors.GestionErroresTiny;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Apr 26 18:36:50 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\006\011\000\002\007\005\000\002\007\003\000" +
    "\002\004\010\000\002\005\004\000\002\005\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\004\000\002\041\006\000\002\011\010\000" +
    "\002\010\007\000\002\012\006\000\002\012\004\000\002" +
    "\013\005\000\002\013\002\000\002\016\005\000\002\015" +
    "\004\000\002\015\002\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\042\003\000\002\042\005\000\002\017" +
    "\005\000\002\017\004\000\002\017\004\000\002\020\006" +
    "\000\002\043\011\000\002\021\007\000\002\021\011\000" +
    "\002\022\007\000\002\023\012\000\002\024\004\000\002" +
    "\024\003\000\002\025\010\000\002\026\005\000\002\031" +
    "\007\000\002\027\005\000\002\027\004\000\002\030\004" +
    "\000\002\032\006\000\002\033\005\000\002\033\003\000" +
    "\002\034\004\000\002\034\004\000\002\034\003\000\002" +
    "\035\005\000\002\035\005\000\002\035\003\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\003\000\002" +
    "\037\005\000\002\037\005\000\002\037\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\024\004\ufffc\041\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\064\ufffc\001\002\000\024" +
    "\004\015\041\011\042\016\043\024\044\023\045\013\046" +
    "\007\047\017\064\014\001\002\000\004\002\006\001\002" +
    "\000\004\002\000\001\002\000\004\004\256\001\002\000" +
    "\024\004\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\046\ufffe\047\ufffe\064\ufffe\001\002\000\012\004\ufff5\011" +
    "\ufff5\016\ufff5\020\ufff5\001\002\000\010\004\244\011\110" +
    "\020\106\001\002\000\012\004\ufff2\011\ufff2\016\ufff2\020" +
    "\ufff2\001\002\000\004\004\235\001\002\000\012\004\uffef" +
    "\011\uffef\016\uffef\020\uffef\001\002\000\012\004\ufff4\011" +
    "\ufff4\020\ufff4\071\025\001\002\000\012\004\ufff0\011\ufff0" +
    "\016\ufff0\020\ufff0\001\002\000\024\004\uffff\041\uffff\042" +
    "\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\064\uffff" +
    "\001\002\000\004\002\001\001\002\000\024\004\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\064\ufffd\001\002\000\012\004\ufff3\011\ufff3\016\ufff3\020" +
    "\ufff3\001\002\000\012\004\ufff1\011\ufff1\016\ufff1\020\ufff1" +
    "\001\002\000\004\016\026\001\002\000\004\017\027\001" +
    "\002\000\004\022\031\001\002\000\004\002\uffeb\001\002" +
    "\000\034\004\uffe4\023\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\047\uffe4\056\uffe4\060\uffe4\063\uffe4\070\uffe4" +
    "\072\uffe4\001\002\000\034\004\037\023\051\041\011\042" +
    "\056\043\024\044\023\045\013\047\017\056\034\060\041" +
    "\063\040\070\036\072\050\001\002\000\004\033\234\001" +
    "\002\000\004\016\230\001\002\000\036\004\uffdb\023\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\047\uffdb\056" +
    "\uffdb\060\uffdb\063\uffdb\066\uffdb\070\uffdb\072\uffdb\001\002" +
    "\000\030\004\066\005\104\006\103\010\062\016\077\033" +
    "\225\040\063\050\067\051\100\052\076\053\064\001\002" +
    "\000\016\004\uffef\011\uffef\013\uffda\016\154\020\uffef\035" +
    "\uffda\001\002\000\004\016\203\001\002\000\004\016\175" +
    "\001\002\000\010\004\173\011\110\020\106\001\002\000" +
    "\036\004\uffdd\023\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\047\uffdd\056\uffdd\060\uffdd\063\uffdd\066\uffdd\070" +
    "\uffdd\072\uffdd\001\002\000\036\004\uffe5\023\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\047\uffe5\056\uffe5\060" +
    "\uffe5\063\uffe5\066\uffe5\070\uffe5\072\uffe5\001\002\000\036" +
    "\004\uffe3\023\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\047\uffe3\056\uffe3\060\uffe3\063\uffe3\066\uffe3\070\uffe3" +
    "\072\uffe3\001\002\000\036\004\uffe0\023\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0\056\uffe0\060\uffe0" +
    "\063\uffe0\066\uffe0\070\uffe0\072\uffe0\001\002\000\036\004" +
    "\uffdc\023\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\047\uffdc\056\uffdc\060\uffdc\063\uffdc\066\uffdc\070\uffdc\072" +
    "\uffdc\001\002\000\004\016\164\001\002\000\046\002\uffe6" +
    "\004\uffe6\023\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\056\uffe6\060\uffe6\062\uffe6\063\uffe6" +
    "\064\uffe6\066\uffe6\070\uffe6\072\uffe6\001\002\000\036\004" +
    "\uffde\023\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\047\uffde\056\uffde\060\uffde\063\uffde\066\uffde\070\uffde\072" +
    "\uffde\001\002\000\006\013\061\035\060\001\002\000\036" +
    "\004\uffe2\023\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\047\uffe2\056\uffe2\060\uffe2\063\uffe2\066\uffe2\070\uffe2" +
    "\072\uffe2\001\002\000\036\004\uffdf\023\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\047\uffdf\056\uffdf\060\uffdf" +
    "\063\uffdf\066\uffdf\070\uffdf\072\uffdf\001\002\000\012\004" +
    "\ufff4\011\ufff4\016\ufff4\020\ufff4\001\002\000\036\004\uffe1" +
    "\023\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\047" +
    "\uffe1\056\uffe1\060\uffe1\063\uffe1\066\uffe1\070\uffe1\072\uffe1" +
    "\001\002\000\004\004\163\001\002\000\030\004\066\005" +
    "\104\006\103\010\062\016\077\040\063\050\067\051\100" +
    "\052\076\053\064\054\102\001\002\000\026\004\066\005" +
    "\104\006\103\010\062\016\077\040\063\050\067\051\100" +
    "\052\076\053\064\001\002\000\026\004\066\005\104\006" +
    "\103\010\062\016\077\040\063\050\067\051\100\052\076" +
    "\053\064\001\002\000\046\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\014\uffac\015\uffac\017\uffac\024\uffac\025\uffac\026\uffac" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\036" +
    "\uffac\037\uffac\001\002\000\046\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\014\uffaa\015\uffaa\017\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\036\uffaa\037\uffaa\001\002\000\052\007\uffda\010\uffda\011" +
    "\uffda\012\uffda\014\uffda\015\uffda\016\154\017\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\001\002\000\046" +
    "\007\uffb1\010\uffb1\011\uffb1\012\uffb1\014\uffb1\015\uffb1\017" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\036\uffb1\037\uffb1\001\002\000" +
    "\046\007\uffb2\010\uffb2\011\uffb2\012\uffb2\014\uffb2\015\uffb2" +
    "\017\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2\001\002" +
    "\000\046\007\uffb5\010\uffb5\011\uffb5\012\uffb5\014\uffb5\015" +
    "\uffb5\017\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\036\137\037\140\001" +
    "\002\000\042\007\133\010\127\011\uffbf\012\uffbf\014\uffbf" +
    "\015\131\017\uffbf\024\134\025\130\026\132\027\125\030" +
    "\135\031\126\032\uffbf\033\uffbf\034\uffbf\001\002\000\020" +
    "\011\123\012\122\014\uffc2\017\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\001\002\000\014\014\uffc5\017\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\001\002\000\006\014\117\033\121\001\002\000" +
    "\046\007\uffad\010\uffad\011\uffad\012\uffad\014\uffad\015\uffad" +
    "\017\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\033\uffad\034\uffad\036\uffad\037\uffad\001\002" +
    "\000\026\004\066\005\104\006\103\010\062\016\077\040" +
    "\063\050\067\051\100\052\076\053\064\001\002\000\046" +
    "\007\uffb0\010\uffb0\011\uffb0\012\uffb0\014\uffb0\015\uffb0\017" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\036\uffb0\037\uffb0\001\002\000" +
    "\050\007\uffab\010\uffab\011\uffab\012\uffab\014\uffab\015\uffab" +
    "\017\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\034\uffab\035\060\036\uffab\037\uffab" +
    "\001\002\000\020\004\015\041\011\042\056\043\024\044" +
    "\023\045\013\047\017\001\002\000\046\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\014\uffae\015\uffae\017\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\036\uffae\037\uffae\001\002\000\046\007\uffaf\010" +
    "\uffaf\011\uffaf\012\uffaf\014\uffaf\015\uffaf\017\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\036\uffaf\037\uffaf\001\002\000\010\011\110" +
    "\016\107\020\106\001\002\000\004\005\113\001\002\000" +
    "\004\017\111\001\002\000\012\004\uffee\011\uffee\016\uffee" +
    "\020\uffee\001\002\000\004\033\112\001\002\000\036\004" +
    "\uffd4\023\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\047\uffd4\056\uffd4\060\uffd4\063\uffd4\066\uffd4\070\uffd4\072" +
    "\uffd4\001\002\000\004\021\114\001\002\000\012\004\uffed" +
    "\011\uffed\016\uffed\020\uffed\001\002\000\006\014\117\017" +
    "\116\001\002\000\046\007\uffa9\010\uffa9\011\uffa9\012\uffa9" +
    "\014\uffa9\015\uffa9\017\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\036\uffa9" +
    "\037\uffa9\001\002\000\026\004\066\005\104\006\103\010" +
    "\062\016\077\040\063\050\067\051\100\052\076\053\064" +
    "\001\002\000\014\014\uffc6\017\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\001\002\000\036\004\uffd5\023\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\045\uffd5\047\uffd5\056\uffd5\060\uffd5\063" +
    "\uffd5\066\uffd5\070\uffd5\072\uffd5\001\002\000\022\004\066" +
    "\005\104\006\103\016\077\050\067\051\100\052\076\053" +
    "\064\001\002\000\022\004\066\005\104\006\103\016\077" +
    "\050\067\051\100\052\076\053\064\001\002\000\042\007" +
    "\133\010\127\011\uffc1\012\uffc1\014\uffc1\015\131\017\uffc1" +
    "\024\134\025\130\026\132\027\125\030\135\031\126\032" +
    "\uffc1\033\uffc1\034\uffc1\001\002\000\022\004\066\005\104" +
    "\006\103\016\077\050\067\051\100\052\076\053\064\001" +
    "\002\000\022\004\066\005\104\006\103\016\077\050\067" +
    "\051\100\052\076\053\064\001\002\000\022\004\066\005" +
    "\104\006\103\016\077\050\067\051\100\052\076\053\064" +
    "\001\002\000\022\004\066\005\104\006\103\016\077\050" +
    "\067\051\100\052\076\053\064\001\002\000\022\004\066" +
    "\005\104\006\103\016\077\050\067\051\100\052\076\053" +
    "\064\001\002\000\022\004\066\005\104\006\103\016\077" +
    "\050\067\051\100\052\076\053\064\001\002\000\022\004" +
    "\066\005\104\006\103\016\077\050\067\051\100\052\076" +
    "\053\064\001\002\000\022\004\066\005\104\006\103\016" +
    "\077\050\067\051\100\052\076\053\064\001\002\000\022" +
    "\004\066\005\104\006\103\016\077\050\067\051\100\052" +
    "\076\053\064\001\002\000\046\007\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\014\uffb9\015\uffb9\017\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\036\137\037\140\001\002\000\022\004\066\005\104\006" +
    "\103\016\077\050\067\051\100\052\076\053\064\001\002" +
    "\000\022\004\066\005\104\006\103\016\077\050\067\051" +
    "\100\052\076\053\064\001\002\000\046\007\uffb3\010\uffb3" +
    "\011\uffb3\012\uffb3\014\uffb3\015\uffb3\017\uffb3\024\uffb3\025" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\036\uffb3\037\uffb3\001\002\000\046\007\uffb4\010" +
    "\uffb4\011\uffb4\012\uffb4\014\uffb4\015\uffb4\017\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\036\uffb4\037\uffb4\001\002\000\046\007\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\014\uffbe\015\uffbe\017\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\036\137\037\140\001\002\000\046\007" +
    "\uffb8\010\uffb8\011\uffb8\012\uffb8\014\uffb8\015\uffb8\017\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\036\137\037\140\001\002\000\046" +
    "\007\uffbc\010\uffbc\011\uffbc\012\uffbc\014\uffbc\015\uffbc\017" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\036\137\037\140\001\002\000" +
    "\046\007\uffb6\010\uffb6\011\uffb6\012\uffb6\014\uffb6\015\uffb6" +
    "\017\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\036\137\037\140\001\002" +
    "\000\046\007\uffbd\010\uffbd\011\uffbd\012\uffbd\014\uffbd\015" +
    "\uffbd\017\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\036\137\037\140\001" +
    "\002\000\046\007\uffb7\010\uffb7\011\uffb7\012\uffb7\014\uffb7" +
    "\015\uffb7\017\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\036\137\037\140" +
    "\001\002\000\046\007\uffba\010\uffba\011\uffba\012\uffba\014" +
    "\uffba\015\uffba\017\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\036\137\037" +
    "\140\001\002\000\046\007\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\014\uffbb\015\uffbb\017\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036\137" +
    "\037\140\001\002\000\042\007\133\010\127\011\uffc0\012" +
    "\uffc0\014\uffc0\015\131\017\uffc0\024\134\025\130\026\132" +
    "\027\125\030\135\031\126\032\uffc0\033\uffc0\034\uffc0\001" +
    "\002\000\006\017\uffe7\032\uffe7\001\002\000\006\017\157" +
    "\032\156\001\002\000\026\004\066\005\104\006\103\010" +
    "\062\016\077\040\063\050\067\051\100\052\076\053\064" +
    "\001\002\000\046\007\uffc7\010\uffc7\011\uffc7\012\uffc7\014" +
    "\uffc7\015\uffc7\017\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\036\uffc7\037" +
    "\uffc7\001\002\000\010\014\117\017\uffe8\032\uffe8\001\002" +
    "\000\014\014\uffc4\017\uffc4\032\uffc4\033\uffc4\034\uffc4\001" +
    "\002\000\014\014\uffc3\017\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\001\002\000\052\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\017\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\001\002\000\026\004\066\005\104" +
    "\006\103\010\062\016\077\040\063\050\067\051\100\052" +
    "\076\053\064\001\002\000\006\014\117\017\166\001\002" +
    "\000\004\033\167\001\002\000\036\004\uffcb\023\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\047\uffcb\056\uffcb" +
    "\060\uffcb\063\uffcb\066\uffcb\070\uffcb\072\uffcb\001\002\000" +
    "\036\004\uffd6\023\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\047\uffd6\056\uffd6\060\uffd6\063\uffd6\066\uffd6\070" +
    "\uffd6\072\uffd6\001\002\000\010\013\061\033\174\035\060" +
    "\001\002\000\036\004\uffd7\023\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\047\uffd7\056\uffd7\060\uffd7\063\uffd7" +
    "\066\uffd7\070\uffd7\072\uffd7\001\002\000\010\013\uffda\033" +
    "\uffda\035\uffda\001\002\000\036\004\uffd8\023\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\045\uffd8\047\uffd8\056\uffd8\060" +
    "\uffd8\063\uffd8\066\uffd8\070\uffd8\072\uffd8\001\002\000\026" +
    "\004\066\005\104\006\103\010\062\016\077\040\063\050" +
    "\067\051\100\052\076\053\064\001\002\000\006\014\117" +
    "\017\177\001\002\000\004\022\031\001\002\000\040\004" +
    "\uffd3\023\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\047\uffd3\056\uffd3\060\uffd3\062\201\063\uffd3\066\uffd3\070" +
    "\uffd3\072\uffd3\001\002\000\004\022\031\001\002\000\036" +
    "\004\uffd2\023\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\047\uffd2\056\uffd2\060\uffd2\063\uffd2\066\uffd2\070\uffd2" +
    "\072\uffd2\001\002\000\026\004\066\005\104\006\103\010" +
    "\062\016\077\040\063\050\067\051\100\052\076\053\064" +
    "\001\002\000\006\014\117\017\205\001\002\000\004\022" +
    "\206\001\002\000\004\065\211\001\002\000\006\065\uffce" +
    "\067\uffce\001\002\000\006\065\211\067\217\001\002\000" +
    "\026\004\066\005\104\006\103\010\062\016\077\040\063" +
    "\050\067\051\100\052\076\053\064\001\002\000\006\014" +
    "\117\034\213\001\002\000\034\004\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\045\uffe4\047\uffe4\056\uffe4\060\uffe4\063" +
    "\uffe4\066\uffe4\070\uffe4\072\uffe4\001\002\000\034\004\037" +
    "\041\011\042\056\043\024\044\023\045\013\047\017\056" +
    "\034\060\041\063\040\066\215\070\036\072\050\001\002" +
    "\000\004\033\216\001\002\000\006\065\uffcd\067\uffcd\001" +
    "\002\000\004\034\223\001\002\000\006\065\uffcf\067\uffcf" +
    "\001\002\000\004\023\222\001\002\000\036\004\uffd0\023" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0" +
    "\056\uffd0\060\uffd0\063\uffd0\066\uffd0\070\uffd0\072\uffd0\001" +
    "\002\000\034\004\uffe4\023\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\047\uffe4\056\uffe4\060\uffe4\063\uffe4\070" +
    "\uffe4\072\uffe4\001\002\000\034\004\037\023\uffcc\041\011" +
    "\042\056\043\024\044\023\045\013\047\017\056\034\060" +
    "\041\063\040\070\036\072\050\001\002\000\036\004\uffc9" +
    "\023\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\047" +
    "\uffc9\056\uffc9\060\uffc9\063\uffc9\066\uffc9\070\uffc9\072\uffc9" +
    "\001\002\000\006\014\117\033\227\001\002\000\036\004" +
    "\uffca\023\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca" +
    "\047\uffca\056\uffca\060\uffca\063\uffca\066\uffca\070\uffca\072" +
    "\uffca\001\002\000\026\004\066\005\104\006\103\010\062" +
    "\016\077\040\063\050\067\051\100\052\076\053\064\001" +
    "\002\000\006\014\117\017\232\001\002\000\004\022\031" +
    "\001\002\000\036\004\uffd1\023\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\045\uffd1\047\uffd1\056\uffd1\060\uffd1\063\uffd1" +
    "\066\uffd1\070\uffd1\072\uffd1\001\002\000\036\004\uffc8\023" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\047\uffc8" +
    "\056\uffc8\060\uffc8\063\uffc8\066\uffc8\070\uffc8\072\uffc8\001" +
    "\002\000\004\022\236\001\002\000\020\004\015\041\011" +
    "\042\056\043\024\044\023\045\013\047\017\001\002\000" +
    "\022\004\015\023\241\041\011\042\056\043\024\044\023" +
    "\045\013\047\017\001\002\000\022\004\ufff6\023\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\047\ufff6\001\002" +
    "\000\004\033\243\001\002\000\022\004\ufff7\023\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\047\ufff7\001\002" +
    "\000\024\004\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\064\ufff8\001\002\000\004\016\245" +
    "\001\002\000\020\004\015\041\011\042\056\043\024\044" +
    "\023\045\013\047\017\001\002\000\010\004\255\011\110" +
    "\020\106\001\002\000\006\017\251\032\250\001\002\000" +
    "\020\004\015\041\011\042\056\043\024\044\023\045\013" +
    "\047\017\001\002\000\004\022\031\001\002\000\024\004" +
    "\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec" +
    "\047\uffec\064\uffec\001\002\000\010\004\254\011\110\020" +
    "\106\001\002\000\006\017\uffea\032\uffea\001\002\000\006" +
    "\017\uffe9\032\uffe9\001\002\000\004\013\257\001\002\000" +
    "\004\022\260\001\002\000\004\004\261\001\002\000\006" +
    "\023\ufff9\032\ufff9\001\002\000\006\023\264\032\263\001" +
    "\002\000\004\004\266\001\002\000\004\033\265\001\002" +
    "\000\024\004\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\064\ufffb\001\002\000\006\023\ufffa" +
    "\032\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\002\004\003\003\001\001\000\014\004" +
    "\017\006\007\010\020\011\021\041\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\027\001\001\000\002" +
    "\001\001\000\004\015\031\001\001\000\034\014\043\017" +
    "\044\020\053\021\045\022\054\023\051\027\046\030\034" +
    "\031\042\032\032\041\041\042\052\043\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\032\064\033\225\034\073\035\072\036\071\037\070\040" +
    "\067\042\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\171\042\170\043\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\032\064\033\074\034\073" +
    "\035\072\036\071\037\070\040\067\042\100\001\001\000" +
    "\020\032\064\034\161\035\072\036\071\037\070\040\067" +
    "\042\100\001\001\000\020\032\064\034\160\035\072\036" +
    "\071\037\070\040\067\042\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\032\064\033\114\034\073\035\072\036\071" +
    "\037\070\040\067\042\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\032\064\034\117\035\072" +
    "\036\071\037\070\040\067\042\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\032\064\036\152\037\070" +
    "\040\067\042\100\001\001\000\014\032\064\036\123\037" +
    "\070\040\067\042\100\001\001\000\002\001\001\000\012" +
    "\032\064\037\151\040\067\042\100\001\001\000\012\032" +
    "\064\037\150\040\067\042\100\001\001\000\012\032\064" +
    "\037\147\040\067\042\100\001\001\000\012\032\064\037" +
    "\146\040\067\042\100\001\001\000\012\032\064\037\145" +
    "\040\067\042\100\001\001\000\012\032\064\037\144\040" +
    "\067\042\100\001\001\000\012\032\064\037\143\040\067" +
    "\042\100\001\001\000\012\032\064\037\142\040\067\042" +
    "\100\001\001\000\012\032\064\037\135\040\067\042\100" +
    "\001\001\000\002\001\001\000\010\032\064\040\141\042" +
    "\100\001\001\000\010\032\064\040\140\042\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\154\001\001\000\002" +
    "\001\001\000\022\032\064\033\157\034\073\035\072\036" +
    "\071\037\070\040\067\042\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\032\064\033\164\034\073\035\072" +
    "\036\071\037\070\040\067\042\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\032\064\033\175\034\073\035\072" +
    "\036\071\037\070\040\067\042\100\001\001\000\002\001" +
    "\001\000\004\016\177\001\001\000\002\001\001\000\004" +
    "\016\201\001\001\000\002\001\001\000\022\032\064\033" +
    "\203\034\073\035\072\036\071\037\070\040\067\042\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\207\025\206\001\001\000\002\001\001\000\006\025\217" +
    "\026\220\001\001\000\022\032\064\033\211\034\073\035" +
    "\072\036\071\037\070\040\067\042\100\001\001\000\002" +
    "\001\001\000\004\015\213\001\001\000\034\014\043\017" +
    "\044\020\053\021\045\022\054\023\051\027\046\030\034" +
    "\031\042\032\032\041\041\042\052\043\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\223\001\001\000\034\014\043\017\044\020\053\021\045" +
    "\022\054\023\051\027\046\030\034\031\042\032\032\041" +
    "\041\042\052\043\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\032\064\033\230\034" +
    "\073\035\072\036\071\037\070\040\067\042\100\001\001" +
    "\000\002\001\001\000\004\016\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\236" +
    "\017\237\041\041\001\001\000\006\017\241\041\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\246\041" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\252\001\001\000\004\016\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= Entrada FuncionMain 
            {
              Programa RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Fmain fmain = (Fmain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Programa(definiciones, fmain); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Entrada ::= Entrada Struct 
            {
              ListaDefiniciones RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StructClass str = (StructClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = definiciones; definiciones.addStruct(str); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Entrada ::= Entrada Enumerado 
            {
              ListaDefiniciones RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		EnumClass en = (EnumClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = definiciones; definiciones.addEnum(en); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Entrada ::= Entrada Funcion 
            {
              ListaDefiniciones RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = definiciones; definiciones.addFuncion(f); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Entrada ::= 
            {
              ListaDefiniciones RESULT =null;
		 RESULT = new ListaDefiniciones(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Enumerado ::= ENUM IDEN IGUAL LAP DentroEnumerado LCIERRE PUNTOYCOMA 
            {
              EnumClass RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<String> valores = (List<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new EnumClass(nombre.lexema,valores); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Enumerado",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DentroEnumerado ::= DentroEnumerado COMA IDEN 
            {
              List<String> RESULT =null;
		List<String> restoValores = (List<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue valor = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = restoValores; restoValores.add(valor.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroEnumerado",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DentroEnumerado ::= IDEN 
            {
              List<String> RESULT =null;
		TokenValue valor = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(valor.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroEnumerado",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Struct ::= STRUCT IDEN LAP DentroStruct LCIERRE PUNTOYCOMA 
            {
              StructClass RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<DecClass> valores = (List<DecClass>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new StructClass(nombre.lexema,valores); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Struct",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DentroStruct ::= DentroStruct Declaracion 
            {
              List<DecClass> RESULT =null;
		List<DecClass> resto = (List<DecClass>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DecClass decl = (DecClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = resto; resto.add(decl); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroStruct",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DentroStruct ::= Declaracion 
            {
              List<DecClass> RESULT =null;
		DecClass decl = (DecClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<DecClass>(); RESULT.add(decl); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroStruct",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Tipo ::= INT 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tipo ::= VOID 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= FLOAT 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= BOOL 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= CHAR 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= STRING 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= IDEN 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoEstructuraClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= Tipo POR 
            {
              TipoClass RESULT =null;
		TipoClass tipo = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoPunteroClass(tipo); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= Tipo CAP ENT CCIERRE 
            {
              TipoClass RESULT =null;
		TipoClass tipo = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue num = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoArrayClass(tipo,num.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Funcion ::= Tipo IDEN PAP Args PCIERRE BloqueInstrucciones 
            {
              Funcion RESULT =null;
		TipoClass tipo = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<ParTipoIden> args = (List<ParTipoIden>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Funcion(tipo, nombre.lexema, args, ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FuncionMain ::= VOID MAIN PAP PCIERRE BloqueInstrucciones 
            {
              Fmain RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Fmain("main", ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FuncionMain",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Args ::= Args COMA Tipo IDEN 
            {
              List<ParTipoIden> RESULT =null;
		List<ParTipoIden> args = (List<ParTipoIden>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = args; args.add(new ParTipoIden(t,iden.lexema)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Args ::= Tipo IDEN 
            {
              List<ParTipoIden> RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<ParTipoIden>(); RESULT.add(new ParTipoIden(t,iden.lexema)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Params ::= Params COMA E0 
            {
              List<Expresion> RESULT =null;
		List<Expresion> params = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = params ; params.add(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Params ::= 
            {
              List<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BloqueInstrucciones ::= LAP Instrucciones LCIERRE 
            {
              List<Ins> RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = ins; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueInstrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instrucciones ::= Instrucciones Instruccion 
            {
              List<Ins> RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Ins elem = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ins; ins.add(elem); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instrucciones ::= 
            {
              List<Ins> RESULT =null;
		 RESULT = new ArrayList<Ins>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruccion ::= Declaracion 
            {
              Ins RESULT =null;
		DecClass elem = (DecClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instruccion ::= Asignacion 
            {
              Ins RESULT =null;
		AsigClass elem = (AsigClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instruccion ::= CrearMem 
            {
              Ins RESULT =null;
		NewClass elem = (NewClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instruccion ::= If 
            {
              Ins RESULT =null;
		IfClass elem = (IfClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instruccion ::= While 
            {
              Ins RESULT =null;
		WhileClass elem = (WhileClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruccion ::= Switch 
            {
              Ins RESULT =null;
		SwitchClass elem = (SwitchClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instruccion ::= Print 
            {
              Ins RESULT =null;
		PrintClass elem = (PrintClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instruccion ::= Return 
            {
              Ins RESULT =null;
		ReturnClass elem = (ReturnClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion ::= InsLlamadaFuncion 
            {
              Ins RESULT =null;
		FuncallClass elem = (FuncallClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Acceso ::= IDEN 
            {
              Acceso RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new AccesoVar(nombre.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Acceso ::= Acceso PUNTO IDEN 
            {
              Acceso RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue campo = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new AccesoStruct(ref,campo.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Declaracion ::= Tipo Acceso PUNTOYCOMA 
            {
              DecClass RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DecClass(t,ref); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Declaracion ::= Tipo Asignacion 
            {
              DecClass RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		AsigClass asig = (AsigClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new DecClass(t,asig); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Declaracion ::= Tipo CrearMem 
            {
              DecClass RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		NewClass asigNew = (NewClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new DecClass(t,asigNew); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Asignacion ::= Acceso IGUAL E0 PUNTOYCOMA 
            {
              AsigClass RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new AsigClass(ref, exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CrearMem ::= Acceso IGUAL NEW Tipo PAP PCIERRE PUNTOYCOMA 
            {
              NewClass RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		TipoClass tipo = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		 RESULT = new NewClass(ref,tipo); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CrearMem",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // If ::= IF PAP E0 PCIERRE BloqueInstrucciones 
            {
              IfClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new IfClass(exp,ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // If ::= IF PAP E0 PCIERRE BloqueInstrucciones ELSE BloqueInstrucciones 
            {
              IfClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> inselse = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new IfClass(exp,ins,inselse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // While ::= WHILE PAP E0 PCIERRE BloqueInstrucciones 
            {
              WhileClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new WhileClass(exp,ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("While",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Switch ::= SWITCH PAP E0 PCIERRE LAP BloqueCase Default LCIERRE 
            {
              SwitchClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<CaseSwitch> casos = (List<CaseSwitch>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CaseSwitch def = (CaseSwitch)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 casos.add(def); RESULT = new SwitchClass(exp,casos); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Switch",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BloqueCase ::= BloqueCase Case 
            {
              List<CaseSwitch> RESULT =null;
		List<CaseSwitch> casos = (List<CaseSwitch>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CaseSwitch caso = (CaseSwitch)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = casos; casos.add(caso); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueCase",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BloqueCase ::= Case 
            {
              List<CaseSwitch> RESULT =null;
		CaseSwitch caso = (CaseSwitch)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<CaseSwitch>(); RESULT.add(caso); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueCase",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Case ::= CASE E0 DOSPUNTOS Instrucciones BREAK PUNTOYCOMA 
            {
              CaseSwitch RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new CaseSwitch(exp,ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Case",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Default ::= DEFAULT DOSPUNTOS Instrucciones 
            {
              CaseSwitch RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new CaseSwitch(ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Default",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Print ::= PRINT PAP E0 PCIERRE PUNTOYCOMA 
            {
              PrintClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new PrintClass(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Print",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Return ::= RETURN E0 PUNTOYCOMA 
            {
              ReturnClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ReturnClass(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Return",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Return ::= RETURN PUNTOYCOMA 
            {
              ReturnClass RESULT =null;
		 RESULT = new ReturnClass(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Return",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // InsLlamadaFuncion ::= LlamadaFuncion PUNTOYCOMA 
            {
              FuncallClass RESULT =null;
		FuncallExp funcion = (FuncallExp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new FuncallClass(funcion); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsLlamadaFuncion",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LlamadaFuncion ::= IDEN PAP Params PCIERRE 
            {
              FuncallExp RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<Expresion> params = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new FuncallExp(nombre.lexema,params); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E0 ::= E0 POTENCIA E1 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpPotencia(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E0 ::= E1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E1 ::= NEG E1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpNegar(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E1 ::= MENOS E1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpCambioSigno(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E2 ::= E2 POR E3 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMult(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E2 ::= E2 DIV E3 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpDiv(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E3 ::= E3 MAYOR E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMayor(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E3 ::= E3 MENOR E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMenor(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E3 ::= E3 MAYORIGUAL E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMayorigual(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E3 ::= E3 MENORIGUAL E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMenorigual(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E3 ::= E3 IGUALDAD E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpIgualdad(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E3 ::= E3 DISTINTO E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpDesigualdad(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E3 ::= E3 MAS E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpSuma(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E3 ::= E3 MENOS E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpResta(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E3 ::= E3 MOD E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpModulo(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E4 ::= E4 AND E5 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpAnd(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E4 ::= E4 OR E5 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpOr(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E5 ::= TRUE 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E5 ::= FALSE 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E5 ::= ENT 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E5 ::= REAL 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E5 ::= CARACTER 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E5 ::= CADENA 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E5 ::= Acceso 
            {
              Expresion RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Acceso(ref); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E5 ::= LlamadaFuncion 
            {
              Expresion RESULT =null;
		FuncallExp llamada = (FuncallExp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = llamada; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E5 ::= PAP E0 PCIERRE 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

