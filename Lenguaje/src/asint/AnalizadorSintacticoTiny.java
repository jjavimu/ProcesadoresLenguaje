
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Apr 18 11:01:02 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Apr 18 11:01:02 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\005\011" +
    "\000\002\006\005\000\002\006\003\000\002\003\010\000" +
    "\002\004\004\000\002\004\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\010\010\000\002\007\007" +
    "\000\002\011\006\000\002\011\004\000\002\011\002\000" +
    "\002\012\006\000\002\013\005\000\002\013\003\000\002" +
    "\013\002\000\002\015\005\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\003\000\002\014\002\000\002\025\004\000\002" +
    "\016\005\000\002\016\004\000\002\017\006\000\002\020" +
    "\007\000\002\020\011\000\002\021\007\000\002\022\011" +
    "\000\002\023\011\000\002\023\005\000\002\034\007\000" +
    "\002\026\005\000\002\026\003\000\002\027\004\000\002" +
    "\027\005\000\002\027\005\000\002\027\003\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\003\000\002" +
    "\032\005\000\002\032\005\000\002\032\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\022\040\006\041\012\042\020\043\021\044" +
    "\010\045\004\051\014\062\011\001\002\000\004\004\216" +
    "\001\002\000\022\040\006\041\012\042\020\043\021\044" +
    "\010\045\004\051\014\062\011\001\002\000\004\004\ufff6" +
    "\001\002\000\004\004\204\001\002\000\004\004\ufff3\001" +
    "\002\000\004\004\175\001\002\000\006\004\ufff5\067\025" +
    "\001\002\000\004\002\024\001\002\000\004\004\ufff1\001" +
    "\002\000\022\040\006\041\012\042\020\043\021\044\010" +
    "\045\004\051\014\062\011\001\002\000\004\002\ufffd\001" +
    "\002\000\022\040\006\041\012\042\020\043\021\044\010" +
    "\045\004\051\014\062\011\001\002\000\004\004\ufff2\001" +
    "\002\000\004\004\ufff4\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\000\001\002\000" +
    "\004\016\026\001\002\000\004\017\027\001\002\000\004" +
    "\036\031\001\002\000\004\002\uffef\001\002\000\034\004" +
    "\037\037\uffdd\040\006\041\053\042\020\043\021\044\010" +
    "\051\014\054\034\056\041\061\040\066\036\070\046\001" +
    "\002\000\036\004\037\037\uffdd\040\006\041\053\042\020" +
    "\043\021\044\010\051\014\054\034\056\041\061\040\064" +
    "\uffdd\066\036\070\046\001\002\000\004\030\173\001\002" +
    "\000\004\016\167\001\002\000\006\037\uffde\064\uffde\001" +
    "\002\000\004\035\063\001\002\000\006\013\127\016\160" +
    "\001\002\000\004\016\140\001\002\000\004\016\132\001" +
    "\002\000\004\004\125\001\002\000\036\004\037\037\uffdd" +
    "\040\006\041\053\042\020\043\021\044\010\051\014\054" +
    "\034\056\041\061\040\064\uffdd\066\036\070\046\001\002" +
    "\000\036\004\037\037\uffdd\040\006\041\053\042\020\043" +
    "\021\044\010\051\014\054\034\056\041\061\040\064\uffdd" +
    "\066\036\070\046\001\002\000\036\004\037\037\uffdd\040" +
    "\006\041\053\042\020\043\021\044\010\051\014\054\034" +
    "\056\041\061\040\064\uffdd\066\036\070\046\001\002\000" +
    "\004\016\060\001\002\000\036\004\037\037\uffdd\040\006" +
    "\041\053\042\020\043\021\044\010\051\014\054\034\056" +
    "\041\061\040\064\uffdd\066\036\070\046\001\002\000\036" +
    "\004\037\037\uffdd\040\006\041\053\042\020\043\021\044" +
    "\010\051\014\054\034\056\041\061\040\064\uffdd\066\036" +
    "\070\046\001\002\000\004\037\055\001\002\000\036\004" +
    "\037\037\uffdd\040\006\041\053\042\020\043\021\044\010" +
    "\051\014\054\034\056\041\061\040\064\uffdd\066\036\070" +
    "\046\001\002\000\004\004\ufff5\001\002\000\006\037\uffe3" +
    "\064\uffe3\001\002\000\046\002\uffe7\004\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\051\uffe7" +
    "\054\uffe7\056\uffe7\060\uffe7\061\uffe7\062\uffe7\064\uffe7\066" +
    "\uffe7\070\uffe7\001\002\000\006\037\uffe5\064\uffe5\001\002" +
    "\000\006\037\uffe2\064\uffe2\001\002\000\004\035\063\001" +
    "\002\000\024\011\115\012\114\014\uffd0\017\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\037\uffd0\064\uffd0\001\002\000\006\014" +
    "\112\017\111\001\002\000\002\001\002\000\046\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\014\uffc2\015\uffc2\017\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\037\uffc2\064\uffc2\001\002\000\046\007" +
    "\073\010\070\011\uffcc\012\uffcc\014\uffcc\015\072\017\uffcc" +
    "\022\075\023\071\024\074\025\066\026\076\027\uffcc\030" +
    "\uffcc\031\uffcc\032\067\037\uffcc\064\uffcc\001\002\000\002" +
    "\001\002\000\002\001\002\000\002\001\002\000\002\001" +
    "\002\000\002\001\002\000\002\001\002\000\002\001\002" +
    "\000\002\001\002\000\002\001\002\000\046\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\014\uffc6\015\uffc6\017\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\037\uffc6\064\uffc6\001\002\000\046\007\uffcb" +
    "\010\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb\017\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\037\uffcb\064\uffcb\001\002\000\046\007" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9\015\uffc9\017\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\037\uffc9\064\uffc9\001\002\000\046" +
    "\007\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\017" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\037\uffc5\064\uffc5\001\002\000" +
    "\046\007\uffc3\010\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3" +
    "\017\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\037\uffc3\064\uffc3\001\002" +
    "\000\046\007\uffca\010\uffca\011\uffca\012\uffca\014\uffca\015" +
    "\uffca\017\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\037\uffca\064\uffca\001" +
    "\002\000\046\007\uffc4\010\uffc4\011\uffc4\012\uffc4\014\uffc4" +
    "\015\uffc4\017\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\037\uffc4\064\uffc4" +
    "\001\002\000\046\007\uffc7\010\uffc7\011\uffc7\012\uffc7\014" +
    "\uffc7\015\uffc7\017\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\037\uffc7\064" +
    "\uffc7\001\002\000\046\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\014\uffc8\015\uffc8\017\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\037\uffc8" +
    "\064\uffc8\001\002\000\046\007\073\010\070\011\uffcf\012" +
    "\uffcf\014\uffcf\015\072\017\uffcf\022\075\023\071\024\074" +
    "\025\066\026\076\027\uffcf\030\uffcf\031\uffcf\032\067\037" +
    "\uffcf\064\uffcf\001\002\000\004\030\120\001\002\000\004" +
    "\035\063\001\002\000\024\011\115\012\114\014\uffd1\017" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\037\uffd1\064\uffd1\001\002" +
    "\000\002\001\002\000\002\001\002\000\046\007\073\010" +
    "\070\011\uffce\012\uffce\014\uffce\015\072\017\uffce\022\075" +
    "\023\071\024\074\025\066\026\076\027\uffce\030\uffce\031" +
    "\uffce\032\067\037\uffce\064\uffce\001\002\000\046\007\073" +
    "\010\070\011\uffcd\012\uffcd\014\uffcd\015\072\017\uffcd\022" +
    "\075\023\071\024\074\025\066\026\076\027\uffcd\030\uffcd" +
    "\031\uffcd\032\067\037\uffcd\064\uffcd\001\002\000\036\004" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\051\uffd2\054\uffd2\056\uffd2\061\uffd2\064\uffd2\066\uffd2\070" +
    "\uffd2\001\002\000\006\037\uffe4\064\uffe4\001\002\000\006" +
    "\037\uffe6\064\uffe6\001\002\000\006\037\uffe0\064\uffe0\001" +
    "\002\000\036\004\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\051\uffda\054\uffda\056\uffda\061\uffda\064" +
    "\uffda\066\uffda\070\uffda\001\002\000\006\013\127\030\126" +
    "\001\002\000\036\004\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\051\uffdb\054\uffdb\056\uffdb\061\uffdb" +
    "\064\uffdb\066\uffdb\070\uffdb\001\002\000\004\035\063\001" +
    "\002\000\006\014\112\030\131\001\002\000\036\004\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\051" +
    "\uffd9\054\uffd9\056\uffd9\061\uffd9\064\uffd9\066\uffd9\070\uffd9" +
    "\001\002\000\004\035\063\001\002\000\006\014\112\017" +
    "\134\001\002\000\004\036\031\001\002\000\040\004\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\051" +
    "\uffd8\054\uffd8\056\uffd8\060\136\061\uffd8\064\uffd8\066\uffd8" +
    "\070\uffd8\001\002\000\004\036\031\001\002\000\036\004" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\051\uffd7\054\uffd7\056\uffd7\061\uffd7\064\uffd7\066\uffd7\070" +
    "\uffd7\001\002\000\004\004\141\001\002\000\004\017\142" +
    "\001\002\000\004\036\143\001\002\000\006\063\146\065" +
    "\144\001\002\000\004\031\156\001\002\000\004\037\155" +
    "\001\002\000\004\035\063\001\002\000\006\014\112\031" +
    "\150\001\002\000\034\004\037\040\006\041\053\042\020" +
    "\043\021\044\010\051\014\054\034\056\041\061\040\064" +
    "\uffdd\066\036\070\046\001\002\000\004\064\152\001\002" +
    "\000\004\030\153\001\002\000\006\063\146\065\144\001" +
    "\002\000\004\037\uffd4\001\002\000\036\004\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\051\uffd5\054" +
    "\uffd5\056\uffd5\061\uffd5\064\uffd5\066\uffd5\070\uffd5\001\002" +
    "\000\034\004\037\037\uffdd\040\006\041\053\042\020\043" +
    "\021\044\010\051\014\054\034\056\041\061\040\066\036" +
    "\070\046\001\002\000\004\037\uffd3\001\002\000\006\017" +
    "\uffe8\035\063\001\002\000\010\014\112\017\uffe9\027\164" +
    "\001\002\000\004\017\163\001\002\000\004\030\uffeb\001" +
    "\002\000\006\017\uffe8\035\063\001\002\000\004\017\uffea" +
    "\001\002\000\010\014\112\037\uffdf\064\uffdf\001\002\000" +
    "\004\035\063\001\002\000\006\014\112\017\171\001\002" +
    "\000\004\036\031\001\002\000\036\004\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\051\uffd6\054\uffd6" +
    "\056\uffd6\061\uffd6\064\uffd6\066\uffd6\070\uffd6\001\002\000" +
    "\006\037\uffdc\064\uffdc\001\002\000\006\037\uffe1\064\uffe1" +
    "\001\002\000\004\036\176\001\002\000\016\040\006\041" +
    "\053\042\020\043\021\044\010\051\014\001\002\000\004" +
    "\037\202\001\002\000\020\037\ufff7\040\006\041\053\042" +
    "\020\043\021\044\010\051\014\001\002\000\004\037\ufff8" +
    "\001\002\000\004\030\203\001\002\000\022\040\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\051\ufff9\062\ufff9" +
    "\001\002\000\004\016\205\001\002\000\020\017\uffec\040" +
    "\006\041\053\042\020\043\021\044\010\051\014\001\002" +
    "\000\004\017\213\001\002\000\004\004\210\001\002\000" +
    "\006\017\uffed\027\211\001\002\000\020\017\uffec\040\006" +
    "\041\053\042\020\043\021\044\010\051\014\001\002\000" +
    "\004\017\uffee\001\002\000\004\036\031\001\002\000\022" +
    "\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\051" +
    "\ufff0\062\ufff0\001\002\000\004\002\001\001\002\000\004" +
    "\013\217\001\002\000\004\036\220\001\002\000\004\004" +
    "\221\001\002\000\006\027\225\037\ufffa\001\002\000\004" +
    "\037\223\001\002\000\004\030\224\001\002\000\022\040" +
    "\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\051\ufffc" +
    "\062\ufffc\001\002\000\004\004\221\001\002\000\004\037" +
    "\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\016\002\012\003\014\005\004\007\015\010" +
    "\016\035\006\001\001\000\002\001\001\000\016\002\214" +
    "\003\014\005\004\007\015\010\016\035\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\022\003\014\005\004\007\015\010\016" +
    "\035\006\001\001\000\002\001\001\000\016\002\021\003" +
    "\014\005\004\007\015\010\016\035\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\027\001\001\000\002\001\001\000\030\012" +
    "\032\014\050\016\043\017\047\020\044\021\051\022\046" +
    "\024\031\025\034\034\042\035\041\001\001\000\030\012" +
    "\032\014\173\016\043\017\047\020\044\021\051\022\046" +
    "\024\031\025\034\034\042\035\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\165" +
    "\027\060\030\064\031\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\123\001\001" +
    "\000\030\012\032\014\122\016\043\017\047\020\044\021" +
    "\051\022\046\024\031\025\034\034\042\035\041\001\001" +
    "\000\030\012\032\014\121\016\043\017\047\020\044\021" +
    "\051\022\046\024\031\025\034\034\042\035\041\001\001" +
    "\000\030\012\032\014\120\016\043\017\047\020\044\021" +
    "\051\022\046\024\031\025\034\034\042\035\041\001\001" +
    "\000\002\001\001\000\030\012\032\014\056\016\043\017" +
    "\047\020\044\021\051\022\046\024\031\025\034\034\042" +
    "\035\041\001\001\000\030\012\032\014\055\016\043\017" +
    "\047\020\044\021\051\022\046\024\031\025\034\034\042" +
    "\035\041\001\001\000\002\001\001\000\030\012\032\014" +
    "\053\016\043\017\047\020\044\021\051\022\046\024\031" +
    "\025\034\034\042\035\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\061\027\060\030\064\031\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\107" +
    "\031\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\106\001\001\000\004\031\105\001\001\000\004" +
    "\031\104\001\001\000\004\031\103\001\001\000\004\031" +
    "\102\001\001\000\004\031\101\001\001\000\004\031\100" +
    "\001\001\000\004\031\077\001\001\000\004\031\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\112\030\064\031" +
    "\063\001\001\000\002\001\001\000\006\030\116\031\063" +
    "\001\001\000\006\030\115\031\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\026\127\027\060" +
    "\030\064\031\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\132\027\060\030\064\031\063\001\001" +
    "\000\002\001\001\000\004\015\134\001\001\000\002\001" +
    "\001\000\004\015\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\146\027\060\030\064\031\063\001\001\000\002\001" +
    "\001\000\030\012\032\014\150\016\043\017\047\020\044" +
    "\021\051\022\046\024\031\025\034\034\042\035\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\012" +
    "\032\014\156\016\043\017\047\020\044\021\051\022\046" +
    "\024\031\025\034\034\042\035\041\001\001\000\002\001" +
    "\001\000\014\013\161\026\160\027\060\030\064\031\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\013\164\026\160\027\060\030\064\031\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\167\027\060\030\064\031\063\001\001\000\002\001\001" +
    "\000\004\015\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\176" +
    "\016\177\035\041\001\001\000\002\001\001\000\010\004" +
    "\200\016\177\035\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\205\035\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\211\035\206\001\001\000" +
    "\002\001\001\000\004\015\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\225\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= Enumerado S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= Struct S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= Funcion S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= FuncionMain 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Enumerado ::= ENUM IDEN IGUAL LAP DentroEnumerado LCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Enumerado",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DentroEnumerado ::= IDEN COMA DentroEnumerado 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroEnumerado",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DentroEnumerado ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroEnumerado",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Struct ::= STRUCT IDEN LAP DentroStruct LCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Struct",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DentroStruct ::= Declaracion DentroStruct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroStruct",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DentroStruct ::= Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroStruct",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Tipo ::= VOID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Funcion ::= Tipo IDEN PAP Args PCIERRE BloqueInstrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Funcion",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FuncionMain ::= VOID MAIN PAP PCIERRE BloqueInstrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FuncionMain",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Args ::= Tipo IDEN COMA Args 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Args ::= Tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Args ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LlamadaFuncion ::= IDEN PAP Params PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Params ::= E0 COMA Params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Params ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BloqueInstrucciones ::= LAP Instrucciones LCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueInstrucciones",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instrucciones ::= Declaracion Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instrucciones ::= Asignacion Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instrucciones ::= If Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instrucciones ::= While Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instrucciones ::= Switch Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instrucciones ::= For Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instrucciones ::= Print Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instrucciones ::= RETURN E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instrucciones ::= InsLlamadaFuncion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instrucciones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // InsLlamadaFuncion ::= LlamadaFuncion PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsLlamadaFuncion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Declaracion ::= Tipo IDEN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Declaracion ::= Tipo Asignacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Asignacion ::= IDEN IGUAL E0 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // If ::= IF PAP E0 PCIERRE BloqueInstrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // If ::= IF PAP E0 PCIERRE BloqueInstrucciones ELSE BloqueInstrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // While ::= WHILE PAP E0 PCIERRE BloqueInstrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("While",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Switch ::= SWITCH PAP IDEN PCIERRE LAP BloqueCase LCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Switch",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BloqueCase ::= CASE E0 DOSPUNTOS Instrucciones BREAK PUNTOYCOMA BloqueCase 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueCase",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BloqueCase ::= DEFAULT DOSPUNTOS Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueCase",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Print ::= PRINT PAP E0 PCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Print",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E0 ::= E0 POTENCIA E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E1 ::= NEG E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E1 ::= E1 POR E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E1 ::= E1 DIV E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E2 ::= E2 MAYOR E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E2 ::= E2 MENOR E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E2 ::= E2 MAYORIGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E2 ::= E2 MENORIGUAL E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E2 ::= E2 IGUALDAD E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E2 ::= E2 DISTINTO E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E2 ::= E2 MAS E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E2 ::= E2 MENOS E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E2 ::= E2 MOD E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E4 ::= E4 AND E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E4 ::= E4 OR E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E5 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E5 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E5 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E5 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E5 ::= CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E5 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E5 ::= LlamadaFuncion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E5 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

