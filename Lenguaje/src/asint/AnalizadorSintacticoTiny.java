
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Apr 22 19:29:15 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.*;
import asint.*;
import ast.*;
import ast.estructuras.*;
import ast.expresiones.*;
import ast.funciones.*;
import ast.instrucciones.*;
import ast.tipos.*;
import errors.GestionErroresTiny;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Apr 22 19:29:15 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\006\011\000\002\007\005\000\002\007\003\000" +
    "\002\004\010\000\002\005\004\000\002\005\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\011\010\000\002\010\007\000\002\012\006\000" +
    "\002\012\004\000\002\013\005\000\002\013\002\000\002" +
    "\016\005\000\002\015\004\000\002\015\002\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\017\005\000\002\017\007\000\002" +
    "\020\006\000\002\021\007\000\002\021\011\000\002\022" +
    "\007\000\002\023\012\000\002\024\004\000\002\024\003" +
    "\000\002\025\010\000\002\026\005\000\002\031\007\000" +
    "\002\027\005\000\002\027\004\000\002\030\004\000\002" +
    "\032\006\000\002\033\005\000\002\033\003\000\002\034" +
    "\004\000\002\034\004\000\002\034\003\000\002\035\005" +
    "\000\002\035\005\000\002\035\003\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\003\000\002\037\005" +
    "\000\002\037\005\000\002\037\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\024\004\ufffc\041\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\064\ufffc\001\002\000\024" +
    "\004\015\041\011\042\016\043\024\044\023\045\013\046" +
    "\007\047\017\064\014\001\002\000\004\002\006\001\002" +
    "\000\004\002\000\001\002\000\004\004\240\001\002\000" +
    "\024\004\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\046\ufffe\047\ufffe\064\ufffe\001\002\000\004\004\ufff5\001" +
    "\002\000\004\004\226\001\002\000\004\004\ufff2\001\002" +
    "\000\004\004\217\001\002\000\004\004\uffef\001\002\000" +
    "\006\004\ufff4\071\025\001\002\000\004\004\ufff0\001\002" +
    "\000\024\004\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045" +
    "\uffff\046\uffff\047\uffff\064\uffff\001\002\000\004\002\001" +
    "\001\002\000\024\004\ufffd\041\ufffd\042\ufffd\043\ufffd\044" +
    "\ufffd\045\ufffd\046\ufffd\047\ufffd\064\ufffd\001\002\000\004" +
    "\004\ufff3\001\002\000\004\004\ufff1\001\002\000\004\016" +
    "\026\001\002\000\004\017\027\001\002\000\004\022\031" +
    "\001\002\000\004\002\uffed\001\002\000\034\004\uffe6\023" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\047\uffe6" +
    "\056\uffe6\060\uffe6\063\uffe6\070\uffe6\072\uffe6\001\002\000" +
    "\034\004\037\023\051\041\011\042\055\043\024\044\023" +
    "\045\013\047\017\056\034\060\041\063\040\070\036\072" +
    "\050\001\002\000\004\033\216\001\002\000\004\016\212" +
    "\001\002\000\036\004\uffde\023\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\045\uffde\047\uffde\056\uffde\060\uffde\063\uffde" +
    "\066\uffde\070\uffde\072\uffde\001\002\000\030\004\063\005" +
    "\061\006\067\010\060\016\062\033\207\040\074\050\064" +
    "\051\065\052\077\053\057\001\002\000\010\004\uffef\013" +
    "\204\016\137\001\002\000\004\016\162\001\002\000\004" +
    "\016\154\001\002\000\004\004\147\001\002\000\036\004" +
    "\uffe0\023\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\047\uffe0\056\uffe0\060\uffe0\063\uffe0\066\uffe0\070\uffe0\072" +
    "\uffe0\001\002\000\036\004\uffe7\023\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\047\uffe7\056\uffe7\060\uffe7\063" +
    "\uffe7\066\uffe7\070\uffe7\072\uffe7\001\002\000\036\004\uffe5" +
    "\023\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\047" +
    "\uffe5\056\uffe5\060\uffe5\063\uffe5\066\uffe5\070\uffe5\072\uffe5" +
    "\001\002\000\036\004\uffe3\023\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\047\uffe3\056\uffe3\060\uffe3\063\uffe3" +
    "\066\uffe3\070\uffe3\072\uffe3\001\002\000\036\004\uffdf\023" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\047\uffdf" +
    "\056\uffdf\060\uffdf\063\uffdf\066\uffdf\070\uffdf\072\uffdf\001" +
    "\002\000\004\016\056\001\002\000\046\002\uffe8\004\uffe8" +
    "\023\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046" +
    "\uffe8\047\uffe8\056\uffe8\060\uffe8\062\uffe8\063\uffe8\064\uffe8" +
    "\066\uffe8\070\uffe8\072\uffe8\001\002\000\036\004\uffe1\023" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\047\uffe1" +
    "\056\uffe1\060\uffe1\063\uffe1\066\uffe1\070\uffe1\072\uffe1\001" +
    "\002\000\036\004\uffe4\023\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\047\uffe4\056\uffe4\060\uffe4\063\uffe4\066" +
    "\uffe4\070\uffe4\072\uffe4\001\002\000\036\004\uffe2\023\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\047\uffe2\056" +
    "\uffe2\060\uffe2\063\uffe2\066\uffe2\070\uffe2\072\uffe2\001\002" +
    "\000\004\004\ufff4\001\002\000\026\004\063\005\061\006" +
    "\067\010\060\016\062\040\074\050\064\051\065\052\077" +
    "\053\057\001\002\000\046\007\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\014\uffb3\015\uffb3\017\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\036" +
    "\uffb3\037\uffb3\001\002\000\026\004\063\005\061\006\067" +
    "\010\060\016\062\040\074\050\064\051\065\052\077\053" +
    "\057\001\002\000\046\007\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\014\uffb6\015\uffb6\017\uffb6\024\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6" +
    "\037\uffb6\001\002\000\026\004\063\005\061\006\067\010" +
    "\060\016\062\040\074\050\064\051\065\052\077\053\057" +
    "\001\002\000\050\007\uffb2\010\uffb2\011\uffb2\012\uffb2\014" +
    "\uffb2\015\uffb2\016\137\017\uffb2\024\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\036" +
    "\uffb2\037\uffb2\001\002\000\046\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\014\uffb8\015\uffb8\017\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\036\uffb8\037\uffb8\001\002\000\046\007\uffb7\010\uffb7\011" +
    "\uffb7\012\uffb7\014\uffb7\015\uffb7\017\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\036\uffb7\037\uffb7\001\002\000\046\007\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\014\uffb1\015\uffb1\017\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\036\uffb1\037\uffb1\001\002\000\046\007\uffb5\010" +
    "\uffb5\011\uffb5\012\uffb5\014\uffb5\015\uffb5\017\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\036\uffb5\037\uffb5\001\002\000\046\007\uffb9" +
    "\010\uffb9\011\uffb9\012\uffb9\014\uffb9\015\uffb9\017\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\036\uffb9\037\uffb9\001\002\000\046\007" +
    "\uffbc\010\uffbc\011\uffbc\012\uffbc\014\uffbc\015\uffbc\017\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\036\122\037\123\001\002\000\042" +
    "\007\115\010\112\011\uffc6\012\uffc6\014\uffc6\015\114\017" +
    "\uffc6\024\117\025\113\026\116\027\110\030\120\031\111" +
    "\032\uffc6\033\uffc6\034\uffc6\001\002\000\020\011\106\012" +
    "\105\014\uffc9\017\uffc9\032\uffc9\033\uffc9\034\uffc9\001\002" +
    "\000\026\004\063\005\061\006\067\010\060\016\062\040" +
    "\074\050\064\051\065\052\077\053\057\001\002\000\014" +
    "\014\uffcc\017\uffcc\032\uffcc\033\uffcc\034\uffcc\001\002\000" +
    "\006\014\101\017\100\001\002\000\046\007\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\014\uffb4\015\uffb4\017\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\036\uffb4\037\uffb4\001\002\000\004\033\103\001" +
    "\002\000\026\004\063\005\061\006\067\010\060\016\062" +
    "\040\074\050\064\051\065\052\077\053\057\001\002\000" +
    "\014\014\uffcd\017\uffcd\032\uffcd\033\uffcd\034\uffcd\001\002" +
    "\000\036\004\uffd2\023\uffd2\041\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\045\uffd2\047\uffd2\056\uffd2\060\uffd2\063\uffd2\066\uffd2" +
    "\070\uffd2\072\uffd2\001\002\000\014\014\uffcb\017\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\001\002\000\022\004\063\005\061" +
    "\006\067\016\062\050\064\051\065\052\077\053\057\001" +
    "\002\000\022\004\063\005\061\006\067\016\062\050\064" +
    "\051\065\052\077\053\057\001\002\000\042\007\115\010" +
    "\112\011\uffc8\012\uffc8\014\uffc8\015\114\017\uffc8\024\117" +
    "\025\113\026\116\027\110\030\120\031\111\032\uffc8\033" +
    "\uffc8\034\uffc8\001\002\000\022\004\063\005\061\006\067" +
    "\016\062\050\064\051\065\052\077\053\057\001\002\000" +
    "\022\004\063\005\061\006\067\016\062\050\064\051\065" +
    "\052\077\053\057\001\002\000\022\004\063\005\061\006" +
    "\067\016\062\050\064\051\065\052\077\053\057\001\002" +
    "\000\022\004\063\005\061\006\067\016\062\050\064\051" +
    "\065\052\077\053\057\001\002\000\022\004\063\005\061" +
    "\006\067\016\062\050\064\051\065\052\077\053\057\001" +
    "\002\000\022\004\063\005\061\006\067\016\062\050\064" +
    "\051\065\052\077\053\057\001\002\000\022\004\063\005" +
    "\061\006\067\016\062\050\064\051\065\052\077\053\057" +
    "\001\002\000\022\004\063\005\061\006\067\016\062\050" +
    "\064\051\065\052\077\053\057\001\002\000\022\004\063" +
    "\005\061\006\067\016\062\050\064\051\065\052\077\053" +
    "\057\001\002\000\046\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\014\uffc0\015\uffc0\017\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\036\122" +
    "\037\123\001\002\000\022\004\063\005\061\006\067\016" +
    "\062\050\064\051\065\052\077\053\057\001\002\000\022" +
    "\004\063\005\061\006\067\016\062\050\064\051\065\052" +
    "\077\053\057\001\002\000\046\007\uffba\010\uffba\011\uffba" +
    "\012\uffba\014\uffba\015\uffba\017\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\036\uffba\037\uffba\001\002\000\046\007\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\014\uffbb\015\uffbb\017\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\036\uffbb\037\uffbb\001\002\000\046\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\014\uffc5\015\uffc5\017\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\036\122\037\123\001\002\000\046\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3\017\uffc3\024\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\036\122\037\123\001\002\000\046\007\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf\017\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\036\122\037\123\001\002\000\046\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\014\uffbd\015\uffbd\017\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\036\122\037\123\001\002\000\046" +
    "\007\uffc4\010\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4\017" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\036\122\037\123\001\002\000" +
    "\046\007\uffbe\010\uffbe\011\uffbe\012\uffbe\014\uffbe\015\uffbe" +
    "\017\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\036\122\037\123\001\002" +
    "\000\046\007\uffc1\010\uffc1\011\uffc1\012\uffc1\014\uffc1\015" +
    "\uffc1\017\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\036\122\037\123\001" +
    "\002\000\046\007\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2" +
    "\015\uffc2\017\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\036\122\037\123" +
    "\001\002\000\042\007\115\010\112\011\uffc7\012\uffc7\014" +
    "\uffc7\015\114\017\uffc7\024\117\025\113\026\116\027\110" +
    "\030\120\031\111\032\uffc7\033\uffc7\034\uffc7\001\002\000" +
    "\006\017\uffe9\032\uffe9\001\002\000\006\017\142\032\141" +
    "\001\002\000\026\004\063\005\061\006\067\010\060\016" +
    "\062\040\074\050\064\051\065\052\077\053\057\001\002" +
    "\000\046\007\uffce\010\uffce\011\uffce\012\uffce\014\uffce\015" +
    "\uffce\017\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\036\uffce\037\uffce\001" +
    "\002\000\010\014\101\017\uffea\032\uffea\001\002\000\006" +
    "\014\101\017\145\001\002\000\046\007\uffb0\010\uffb0\011" +
    "\uffb0\012\uffb0\014\uffb0\015\uffb0\017\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\036\uffb0\037\uffb0\001\002\000\014\014\uffca\017\uffca" +
    "\032\uffca\033\uffca\034\uffca\001\002\000\006\013\151\033" +
    "\150\001\002\000\036\004\uffdd\023\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\044\uffdd\045\uffdd\047\uffdd\056\uffdd\060\uffdd\063" +
    "\uffdd\066\uffdd\070\uffdd\072\uffdd\001\002\000\026\004\063" +
    "\005\061\006\067\010\060\016\062\040\074\050\064\051" +
    "\065\052\077\053\057\001\002\000\006\014\101\033\153" +
    "\001\002\000\036\004\uffdc\023\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\047\uffdc\056\uffdc\060\uffdc\063\uffdc" +
    "\066\uffdc\070\uffdc\072\uffdc\001\002\000\026\004\063\005" +
    "\061\006\067\010\060\016\062\040\074\050\064\051\065" +
    "\052\077\053\057\001\002\000\006\014\101\017\156\001" +
    "\002\000\004\022\031\001\002\000\040\004\uffda\023\uffda" +
    "\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\047\uffda\056" +
    "\uffda\060\uffda\062\160\063\uffda\066\uffda\070\uffda\072\uffda" +
    "\001\002\000\004\022\031\001\002\000\036\004\uffd9\023" +
    "\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\047\uffd9" +
    "\056\uffd9\060\uffd9\063\uffd9\066\uffd9\070\uffd9\072\uffd9\001" +
    "\002\000\026\004\063\005\061\006\067\010\060\016\062" +
    "\040\074\050\064\051\065\052\077\053\057\001\002\000" +
    "\006\014\101\017\164\001\002\000\004\022\165\001\002" +
    "\000\004\065\170\001\002\000\006\065\uffd5\067\uffd5\001" +
    "\002\000\006\065\170\067\176\001\002\000\026\004\063" +
    "\005\061\006\067\010\060\016\062\040\074\050\064\051" +
    "\065\052\077\053\057\001\002\000\006\014\101\034\172" +
    "\001\002\000\034\004\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\045\uffe6\047\uffe6\056\uffe6\060\uffe6\063\uffe6\066\uffe6" +
    "\070\uffe6\072\uffe6\001\002\000\034\004\037\041\011\042" +
    "\055\043\024\044\023\045\013\047\017\056\034\060\041" +
    "\063\040\066\174\070\036\072\050\001\002\000\004\033" +
    "\175\001\002\000\006\065\uffd4\067\uffd4\001\002\000\004" +
    "\034\202\001\002\000\006\065\uffd6\067\uffd6\001\002\000" +
    "\004\023\201\001\002\000\036\004\uffd7\023\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\047\uffd7\056\uffd7\060" +
    "\uffd7\063\uffd7\066\uffd7\070\uffd7\072\uffd7\001\002\000\034" +
    "\004\uffe6\023\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\047\uffe6\056\uffe6\060\uffe6\063\uffe6\070\uffe6\072\uffe6" +
    "\001\002\000\034\004\037\023\uffd3\041\011\042\055\043" +
    "\024\044\023\045\013\047\017\056\034\060\041\063\040" +
    "\070\036\072\050\001\002\000\026\004\063\005\061\006" +
    "\067\010\060\016\062\040\074\050\064\051\065\052\077" +
    "\053\057\001\002\000\006\014\101\033\206\001\002\000" +
    "\036\004\uffdb\023\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb" +
    "\045\uffdb\047\uffdb\056\uffdb\060\uffdb\063\uffdb\066\uffdb\070" +
    "\uffdb\072\uffdb\001\002\000\036\004\uffd0\023\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\056\uffd0\060" +
    "\uffd0\063\uffd0\066\uffd0\070\uffd0\072\uffd0\001\002\000\006" +
    "\014\101\033\211\001\002\000\036\004\uffd1\023\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\047\uffd1\056\uffd1" +
    "\060\uffd1\063\uffd1\066\uffd1\070\uffd1\072\uffd1\001\002\000" +
    "\026\004\063\005\061\006\067\010\060\016\062\040\074" +
    "\050\064\051\065\052\077\053\057\001\002\000\006\014" +
    "\101\017\214\001\002\000\004\022\031\001\002\000\036" +
    "\004\uffd8\023\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\047\uffd8\056\uffd8\060\uffd8\063\uffd8\066\uffd8\070\uffd8" +
    "\072\uffd8\001\002\000\036\004\uffcf\023\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\047\uffcf\056\uffcf\060\uffcf" +
    "\063\uffcf\066\uffcf\070\uffcf\072\uffcf\001\002\000\004\022" +
    "\220\001\002\000\020\004\015\041\011\042\055\043\024" +
    "\044\023\045\013\047\017\001\002\000\022\004\015\023" +
    "\223\041\011\042\055\043\024\044\023\045\013\047\017" +
    "\001\002\000\022\004\ufff6\023\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\045\ufff6\047\ufff6\001\002\000\004\033\225" +
    "\001\002\000\022\004\ufff7\023\ufff7\041\ufff7\042\ufff7\043" +
    "\ufff7\044\ufff7\045\ufff7\047\ufff7\001\002\000\024\004\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\064\ufff8\001\002\000\004\016\227\001\002\000\020" +
    "\004\015\041\011\042\055\043\024\044\023\045\013\047" +
    "\017\001\002\000\004\004\237\001\002\000\006\017\233" +
    "\032\232\001\002\000\020\004\015\041\011\042\055\043" +
    "\024\044\023\045\013\047\017\001\002\000\004\022\031" +
    "\001\002\000\024\004\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\047\uffee\064\uffee\001\002\000\004" +
    "\004\236\001\002\000\006\017\uffec\032\uffec\001\002\000" +
    "\006\017\uffeb\032\uffeb\001\002\000\004\013\241\001\002" +
    "\000\004\022\242\001\002\000\004\004\243\001\002\000" +
    "\006\023\ufff9\032\ufff9\001\002\000\006\023\246\032\245" +
    "\001\002\000\004\004\250\001\002\000\004\033\247\001" +
    "\002\000\024\004\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\064\ufffb\001\002\000\006\023" +
    "\ufffa\032\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\006\002\004\003\003\001\001\000\014\004" +
    "\017\006\007\010\020\011\021\041\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\027\001\001\000\002" +
    "\001\001\000\004\015\031\001\001\000\030\014\043\017" +
    "\044\020\052\021\045\022\053\023\051\027\046\030\034" +
    "\031\042\032\032\041\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\032\065\033\207" +
    "\034\074\035\072\036\071\037\070\040\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\032\065\033\075" +
    "\034\074\035\072\036\071\037\070\040\067\001\001\000" +
    "\002\001\001\000\016\032\065\034\145\035\072\036\071" +
    "\037\070\040\067\001\001\000\002\001\001\000\020\032" +
    "\065\033\143\034\074\035\072\036\071\037\070\040\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\032\065\034\103\035\072\036\071\037\070\040\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\032\065\034\101\035\072" +
    "\036\071\037\070\040\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\032\065\036\135" +
    "\037\070\040\067\001\001\000\012\032\065\036\106\037" +
    "\070\040\067\001\001\000\002\001\001\000\010\032\065" +
    "\037\134\040\067\001\001\000\010\032\065\037\133\040" +
    "\067\001\001\000\010\032\065\037\132\040\067\001\001" +
    "\000\010\032\065\037\131\040\067\001\001\000\010\032" +
    "\065\037\130\040\067\001\001\000\010\032\065\037\127" +
    "\040\067\001\001\000\010\032\065\037\126\040\067\001" +
    "\001\000\010\032\065\037\125\040\067\001\001\000\010" +
    "\032\065\037\120\040\067\001\001\000\002\001\001\000" +
    "\006\032\065\040\124\001\001\000\006\032\065\040\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\137\001\001" +
    "\000\002\001\001\000\020\032\065\033\142\034\074\035" +
    "\072\036\071\037\070\040\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\032\065\033\151\034\074\035\072\036\071\037\070\040" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\032\065\033\154\034\074\035\072\036\071\037\070\040" +
    "\067\001\001\000\002\001\001\000\004\016\156\001\001" +
    "\000\002\001\001\000\004\016\160\001\001\000\002\001" +
    "\001\000\020\032\065\033\162\034\074\035\072\036\071" +
    "\037\070\040\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\166\025\165\001\001\000\002\001\001" +
    "\000\006\025\176\026\177\001\001\000\020\032\065\033" +
    "\170\034\074\035\072\036\071\037\070\040\067\001\001" +
    "\000\002\001\001\000\004\015\172\001\001\000\030\014" +
    "\043\017\044\020\052\021\045\022\053\023\051\027\046" +
    "\030\034\031\042\032\032\041\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\202\001" +
    "\001\000\030\014\043\017\044\020\052\021\045\022\053" +
    "\023\051\027\046\030\034\031\042\032\032\041\041\001" +
    "\001\000\020\032\065\033\204\034\074\035\072\036\071" +
    "\037\070\040\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\032\065\033\212\034\074\035\072\036\071\037" +
    "\070\040\067\001\001\000\002\001\001\000\004\016\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\220\017\221\041\041\001\001\000\006" +
    "\017\223\041\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\230\041\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\234\001\001\000\004\016\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= Entrada FuncionMain 
            {
              Programa RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Fmain fmain = (Fmain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Programa(definiciones, fmain); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Entrada ::= Entrada Struct 
            {
              ListaDefiniciones RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StructClass str = (StructClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = definiciones; definiciones.addStruct(str); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Entrada ::= Entrada Enumerado 
            {
              ListaDefiniciones RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		EnumClass en = (EnumClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = definiciones; definiciones.addEnum(en); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Entrada ::= Entrada Funcion 
            {
              ListaDefiniciones RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = definiciones; definiciones.addFuncion(f); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Entrada ::= 
            {
              ListaDefiniciones RESULT =null;
		 RESULT = new ListaDefiniciones(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Enumerado ::= ENUM IDEN IGUAL LAP DentroEnumerado LCIERRE PUNTOYCOMA 
            {
              EnumClass RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<String> valores = (List<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new EnumClass(nombre.lexema,valores); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Enumerado",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DentroEnumerado ::= DentroEnumerado COMA IDEN 
            {
              List<String> RESULT =null;
		List<String> restoValores = (List<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue valor = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = restoValores; restoValores.add(valor.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroEnumerado",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DentroEnumerado ::= IDEN 
            {
              List<String> RESULT =null;
		TokenValue valor = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(valor.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroEnumerado",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Struct ::= STRUCT IDEN LAP DentroStruct LCIERRE PUNTOYCOMA 
            {
              StructClass RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<DecClass> valores = (List<DecClass>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new StructClass(nombre.lexema,valores); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Struct",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DentroStruct ::= DentroStruct Declaracion 
            {
              List<DecClass> RESULT =null;
		List<DecClass> resto = (List<DecClass>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DecClass decl = (DecClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = resto; resto.add(decl); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroStruct",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DentroStruct ::= Declaracion 
            {
              List<DecClass> RESULT =null;
		DecClass decl = (DecClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<DecClass>(); RESULT.add(decl); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroStruct",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Tipo ::= INT 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tipo ::= VOID 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= FLOAT 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= BOOL 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= CHAR 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= STRING 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= IDEN 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoEstructuraClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Funcion ::= Tipo IDEN PAP Args PCIERRE BloqueInstrucciones 
            {
              Funcion RESULT =null;
		TipoClass tipo = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<ParTipoIden> args = (List<ParTipoIden>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Funcion(tipo, nombre.lexema, args, ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FuncionMain ::= VOID MAIN PAP PCIERRE BloqueInstrucciones 
            {
              Fmain RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Fmain("main", ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FuncionMain",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Args ::= Args COMA Tipo IDEN 
            {
              List<ParTipoIden> RESULT =null;
		List<ParTipoIden> args = (List<ParTipoIden>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = args; args.add(new ParTipoIden(t,iden.lexema)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Args ::= Tipo IDEN 
            {
              List<ParTipoIden> RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<ParTipoIden>(); RESULT.add(new ParTipoIden(t,iden.lexema)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Params ::= Params COMA E0 
            {
              List<Expresion> RESULT =null;
		List<Expresion> params = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = params ; params.add(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Params ::= 
            {
              List<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BloqueInstrucciones ::= LAP Instrucciones LCIERRE 
            {
              List<Ins> RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = ins; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueInstrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instrucciones ::= Instrucciones Instruccion 
            {
              List<Ins> RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Ins elem = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ins; ins.add(elem); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instrucciones ::= 
            {
              List<Ins> RESULT =null;
		 RESULT = new ArrayList<Ins>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instruccion ::= Declaracion 
            {
              Ins RESULT =null;
		DecClass elem = (DecClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instruccion ::= Asignacion 
            {
              Ins RESULT =null;
		AsigClass elem = (AsigClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruccion ::= If 
            {
              Ins RESULT =null;
		IfClass elem = (IfClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instruccion ::= While 
            {
              Ins RESULT =null;
		WhileClass elem = (WhileClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instruccion ::= Switch 
            {
              Ins RESULT =null;
		SwitchClass elem = (SwitchClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instruccion ::= Print 
            {
              Ins RESULT =null;
		PrintClass elem = (PrintClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instruccion ::= Return 
            {
              Ins RESULT =null;
		ReturnClass elem = (ReturnClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruccion ::= InsLlamadaFuncion 
            {
              Ins RESULT =null;
		FuncallClass elem = (FuncallClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Declaracion ::= Tipo IDEN PUNTOYCOMA 
            {
              DecClass RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DecClass(t,nombre.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Declaracion ::= Tipo IDEN IGUAL E0 PUNTOYCOMA 
            {
              DecClass RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DecClass(t,nombre.lexema,exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Asignacion ::= IDEN IGUAL E0 PUNTOYCOMA 
            {
              AsigClass RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new AsigClass(nombre.lexema, exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // If ::= IF PAP E0 PCIERRE BloqueInstrucciones 
            {
              IfClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new IfClass(exp,ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // If ::= IF PAP E0 PCIERRE BloqueInstrucciones ELSE BloqueInstrucciones 
            {
              IfClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> inselse = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new IfClass(exp,ins,inselse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // While ::= WHILE PAP E0 PCIERRE BloqueInstrucciones 
            {
              WhileClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new WhileClass(exp,ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("While",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Switch ::= SWITCH PAP E0 PCIERRE LAP BloqueCase Default LCIERRE 
            {
              SwitchClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<CaseSwitch> casos = (List<CaseSwitch>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CaseSwitch def = (CaseSwitch)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 casos.add(def); RESULT = new SwitchClass(exp,casos); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Switch",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BloqueCase ::= BloqueCase Case 
            {
              List<CaseSwitch> RESULT =null;
		List<CaseSwitch> casos = (List<CaseSwitch>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CaseSwitch caso = (CaseSwitch)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = casos; casos.add(caso); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueCase",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BloqueCase ::= Case 
            {
              List<CaseSwitch> RESULT =null;
		CaseSwitch caso = (CaseSwitch)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<CaseSwitch>(); RESULT.add(caso); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueCase",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Case ::= CASE E0 DOSPUNTOS Instrucciones BREAK PUNTOYCOMA 
            {
              CaseSwitch RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new CaseSwitch(exp,ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Case",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Default ::= DEFAULT DOSPUNTOS Instrucciones 
            {
              CaseSwitch RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new CaseSwitch(ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Default",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Print ::= PRINT PAP E0 PCIERRE PUNTOYCOMA 
            {
              PrintClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new PrintClass(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Print",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Return ::= RETURN E0 PUNTOYCOMA 
            {
              ReturnClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ReturnClass(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Return",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Return ::= RETURN PUNTOYCOMA 
            {
              ReturnClass RESULT =null;
		 RESULT = new ReturnClass(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Return",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // InsLlamadaFuncion ::= LlamadaFuncion PUNTOYCOMA 
            {
              FuncallClass RESULT =null;
		FuncallExp funcion = (FuncallExp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new FuncallClass(funcion); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsLlamadaFuncion",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LlamadaFuncion ::= IDEN PAP Params PCIERRE 
            {
              FuncallExp RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<Expresion> params = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new FuncallExp(nombre.lexema,params); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E0 ::= E0 POTENCIA E1 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpPotencia(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E0 ::= E1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E1 ::= NEG E1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpNegar(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E1 ::= MENOS E1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpCambioSigno(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E2 ::= E2 POR E3 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMult(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E2 ::= E2 DIV E3 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpDiv(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E3 ::= E3 MAYOR E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMayor(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E3 ::= E3 MENOR E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMenor(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E3 ::= E3 MAYORIGUAL E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMayorigual(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E3 ::= E3 MENORIGUAL E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMenorigual(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E3 ::= E3 IGUALDAD E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpIgualdad(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E3 ::= E3 DISTINTO E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpDesigualdad(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E3 ::= E3 MAS E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpSuma(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E3 ::= E3 MENOS E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpResta(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E3 ::= E3 MOD E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpModulo(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E4 ::= E4 AND E5 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpAnd(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E4 ::= E4 OR E5 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpOr(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E5 ::= TRUE 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E5 ::= FALSE 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E5 ::= ENT 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E5 ::= REAL 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E5 ::= CARACTER 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E5 ::= CADENA 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E5 ::= IDEN 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E5 ::= LlamadaFuncion 
            {
              Expresion RESULT =null;
		FuncallExp llamada = (FuncallExp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = llamada; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E5 ::= PAP E0 PCIERRE 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

