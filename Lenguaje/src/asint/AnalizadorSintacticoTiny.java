
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Apr 28 17:33:04 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.*;
import asint.*;
import ast.*;
import ast.estructuras.*;
import ast.accesos.*;
import ast.expresiones.*;
import ast.funciones.*;
import ast.instrucciones.*;
import ast.tipos.*;
import errors.GestionErroresTiny;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Apr 28 17:33:04 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\006\011\000\002\007\005\000\002\007\003\000" +
    "\002\004\010\000\002\005\004\000\002\005\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\004\000\002\046\006\000\002\046\005\000" +
    "\002\011\010\000\002\010\007\000\002\012\006\000\002" +
    "\012\004\000\002\013\005\000\002\013\002\000\002\016" +
    "\005\000\002\015\004\000\002\015\002\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\032\006\000\002\032\005\000\002\032" +
    "\003\000\002\033\003\000\002\033\004\000\002\033\005" +
    "\000\002\017\005\000\002\017\007\000\002\020\006\000" +
    "\002\021\007\000\002\021\011\000\002\022\007\000\002" +
    "\023\012\000\002\024\004\000\002\024\003\000\002\025" +
    "\010\000\002\026\005\000\002\031\007\000\002\027\005" +
    "\000\002\027\004\000\002\030\004\000\002\034\006\000" +
    "\002\035\005\000\002\035\003\000\002\036\005\000\002" +
    "\036\003\000\002\037\005\000\002\037\005\000\002\037" +
    "\003\000\002\040\005\000\002\040\005\000\002\040\005" +
    "\000\002\040\005\000\002\040\003\000\002\041\005\000" +
    "\002\041\005\000\002\041\003\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\003\000\002\043" +
    "\004\000\002\043\004\000\002\043\003\000\002\044\005" +
    "\000\002\044\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\006\000\002\045\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\024\004\ufffc\041\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\064\ufffc\001\002\000\024" +
    "\004\015\041\010\042\016\043\024\044\023\045\013\046" +
    "\007\047\017\064\014\001\002\000\004\002\006\001\002" +
    "\000\004\002\000\001\002\000\004\004\272\001\002\000" +
    "\012\004\ufff5\011\ufff5\016\ufff5\025\ufff5\001\002\000\024" +
    "\004\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\064\ufffe\001\002\000\010\004\260\011\116" +
    "\025\115\001\002\000\012\004\ufff2\011\ufff2\016\ufff2\025" +
    "\ufff2\001\002\000\004\004\251\001\002\000\012\004\uffef" +
    "\011\uffef\016\uffef\025\uffef\001\002\000\012\004\ufff4\011" +
    "\ufff4\025\ufff4\071\025\001\002\000\012\004\ufff0\011\ufff0" +
    "\016\ufff0\025\ufff0\001\002\000\024\004\uffff\041\uffff\042" +
    "\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\064\uffff" +
    "\001\002\000\004\002\001\001\002\000\024\004\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\064\ufffd\001\002\000\012\004\ufff3\011\ufff3\016\ufff3\025" +
    "\ufff3\001\002\000\012\004\ufff1\011\ufff1\016\ufff1\025\ufff1" +
    "\001\002\000\004\016\026\001\002\000\004\017\027\001" +
    "\002\000\004\022\031\001\002\000\004\002\uffea\001\002" +
    "\000\040\004\uffe3\011\uffe3\022\uffe3\023\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\047\uffe3\056\uffe3\060\uffe3" +
    "\063\uffe3\070\uffe3\072\uffe3\001\002\000\040\004\037\011" +
    "\044\022\045\023\053\041\010\042\061\043\024\044\023" +
    "\045\013\047\017\056\034\060\041\063\040\070\036\072" +
    "\052\001\002\000\004\033\250\001\002\000\004\016\244" +
    "\001\002\000\042\004\uffdb\011\uffdb\022\uffdb\023\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\047\uffdb\056\uffdb" +
    "\060\uffdb\063\uffdb\066\uffdb\070\uffdb\072\uffdb\001\002\000" +
    "\036\004\073\005\112\006\110\010\065\011\044\016\105" +
    "\022\045\033\241\040\066\050\074\051\106\052\104\053" +
    "\067\054\107\001\002\000\020\004\uffef\011\uffef\013\uffd7" +
    "\016\160\020\uffd7\025\uffef\035\uffd7\001\002\000\004\016" +
    "\217\001\002\000\004\016\211\001\002\000\010\004\204" +
    "\011\116\025\115\001\002\000\042\004\uffdd\011\uffdd\022" +
    "\uffdd\023\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\047\uffdd\056\uffdd\060\uffdd\063\uffdd\066\uffdd\070\uffdd\072" +
    "\uffdd\001\002\000\010\004\201\011\044\022\045\001\002" +
    "\000\010\004\201\011\044\022\045\001\002\000\042\004" +
    "\uffe4\011\uffe4\022\uffe4\023\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\047\uffe4\056\uffe4\060\uffe4\063\uffe4\066" +
    "\uffe4\070\uffe4\072\uffe4\001\002\000\042\004\uffe2\011\uffe2" +
    "\022\uffe2\023\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\047\uffe2\056\uffe2\060\uffe2\063\uffe2\066\uffe2\070\uffe2" +
    "\072\uffe2\001\002\000\042\004\uffe0\011\uffe0\022\uffe0\023" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0" +
    "\056\uffe0\060\uffe0\063\uffe0\066\uffe0\070\uffe0\072\uffe0\001" +
    "\002\000\042\004\uffdc\011\uffdc\022\uffdc\023\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\044\uffdc\045\uffdc\047\uffdc\056\uffdc\060" +
    "\uffdc\063\uffdc\066\uffdc\070\uffdc\072\uffdc\001\002\000\004" +
    "\016\174\001\002\000\052\002\uffe5\004\uffe5\011\uffe5\022" +
    "\uffe5\023\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5" +
    "\046\uffe5\047\uffe5\056\uffe5\060\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\066\uffe5\070\uffe5\072\uffe5\001\002\000\042\004\uffde" +
    "\011\uffde\022\uffde\023\uffde\041\uffde\042\uffde\043\uffde\044" +
    "\uffde\045\uffde\047\uffde\056\uffde\060\uffde\063\uffde\066\uffde" +
    "\070\uffde\072\uffde\001\002\000\042\004\uffe1\011\uffe1\022" +
    "\uffe1\023\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\047\uffe1\056\uffe1\060\uffe1\063\uffe1\066\uffe1\070\uffe1\072" +
    "\uffe1\001\002\000\042\004\uffdf\011\uffdf\022\uffdf\023\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\047\uffdf\056" +
    "\uffdf\060\uffdf\063\uffdf\066\uffdf\070\uffdf\072\uffdf\001\002" +
    "\000\060\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\001\002\000\010" +
    "\013\064\020\062\035\063\001\002\000\012\004\ufff4\011" +
    "\ufff4\016\ufff4\025\ufff4\001\002\000\034\004\073\005\112" +
    "\006\110\010\065\011\044\016\105\022\045\040\066\050" +
    "\074\051\106\052\104\053\067\054\107\001\002\000\004" +
    "\004\171\001\002\000\034\004\073\005\112\006\110\010" +
    "\065\011\044\016\105\022\045\040\066\050\074\051\106" +
    "\052\104\053\067\054\107\001\002\000\034\004\073\005" +
    "\112\006\110\010\065\011\044\016\105\022\045\040\066" +
    "\050\074\051\106\052\104\053\067\054\107\001\002\000" +
    "\034\004\073\005\112\006\110\010\065\011\044\016\105" +
    "\022\045\040\066\050\074\051\106\052\104\053\067\054" +
    "\107\001\002\000\050\007\uffa7\010\uffa7\011\uffa7\012\uffa7" +
    "\014\uffa7\015\uffa7\017\uffa7\021\uffa7\024\uffa7\025\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7" +
    "\036\uffa7\037\uffa7\001\002\000\050\007\uffa5\010\uffa5\011" +
    "\uffa5\012\uffa5\014\uffa5\015\uffa5\017\uffa5\021\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\036\uffa5\037\uffa5\001\002\000\050\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\014\uffad\015\uffad\017\uffad\021" +
    "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad" +
    "\032\uffad\033\uffad\034\uffad\036\uffad\037\uffad\001\002\000" +
    "\050\007\uffaf\010\uffaf\011\uffaf\012\uffaf\014\165\015\uffaf" +
    "\017\uffaf\021\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\036\uffaf\037\uffaf" +
    "\001\002\000\056\007\uffd7\010\uffd7\011\uffd7\012\uffd7\014" +
    "\uffd7\015\uffd7\016\160\017\uffd7\020\uffd7\021\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\001\002\000\050" +
    "\007\uffac\010\uffac\011\uffac\012\uffac\014\uffac\015\uffac\017" +
    "\uffac\021\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac" +
    "\031\uffac\032\uffac\033\uffac\034\uffac\036\uffac\037\uffac\001" +
    "\002\000\046\007\uffb2\010\uffb2\011\uffb2\012\uffb2\015\uffb2" +
    "\017\uffb2\021\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2" +
    "\001\002\000\046\007\uffb6\010\uffb6\011\146\012\145\015" +
    "\144\017\uffb6\021\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6\037" +
    "\uffb6\001\002\000\040\007\141\010\142\017\uffb9\021\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\036\uffb9\037\uffb9\001\002\000\034" +
    "\017\uffbe\021\uffbe\024\137\025\136\026\134\027\135\030" +
    "\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe\037\uffbe" +
    "\001\002\000\024\017\uffc1\021\uffc1\030\131\031\132\032" +
    "\uffc1\033\uffc1\034\uffc1\036\uffc1\037\uffc1\001\002\000\020" +
    "\017\uffc3\021\uffc3\032\uffc3\033\uffc3\034\uffc3\036\127\037" +
    "\uffc3\001\002\000\006\033\157\037\125\001\002\000\050" +
    "\007\uffa8\010\uffa8\011\uffa8\012\uffa8\014\uffa8\015\uffa8\017" +
    "\uffa8\021\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\036\uffa8\037\uffa8\001" +
    "\002\000\034\004\073\005\112\006\110\010\065\011\044" +
    "\016\105\022\045\040\066\050\074\051\106\052\104\053" +
    "\067\054\107\001\002\000\050\007\uffab\010\uffab\011\uffab" +
    "\012\uffab\014\uffab\015\uffab\017\uffab\021\uffab\024\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\036\uffab\037\uffab\001\002\000\020\004\015\041" +
    "\010\042\061\043\024\044\023\045\013\047\017\001\002" +
    "\000\050\007\uffa9\010\uffa9\011\uffa9\012\uffa9\014\uffa9\015" +
    "\uffa9\017\uffa9\021\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\036\uffa9\037" +
    "\uffa9\001\002\000\054\007\uffa6\010\uffa6\011\uffa6\012\uffa6" +
    "\014\uffa6\015\uffa6\017\uffa6\020\062\021\uffa6\024\uffa6\025" +
    "\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6" +
    "\034\uffa6\035\063\036\uffa6\037\uffa6\001\002\000\050\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\014\uffaa\015\uffaa\017\uffaa" +
    "\021\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\036\uffaa\037\uffaa\001\002" +
    "\000\010\011\116\016\114\025\115\001\002\000\004\017" +
    "\122\001\002\000\006\005\117\024\120\001\002\000\012" +
    "\004\uffee\011\uffee\016\uffee\025\uffee\001\002\000\004\024" +
    "\121\001\002\000\012\004\uffec\011\uffec\016\uffec\025\uffec" +
    "\001\002\000\012\004\uffed\011\uffed\016\uffed\025\uffed\001" +
    "\002\000\050\007\uffa4\010\uffa4\011\uffa4\012\uffa4\014\uffa4" +
    "\015\uffa4\017\uffa4\021\uffa4\024\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\036\uffa4" +
    "\037\uffa4\001\002\000\006\017\124\037\125\001\002\000" +
    "\050\007\uffa3\010\uffa3\011\uffa3\012\uffa3\014\uffa3\015\uffa3" +
    "\017\uffa3\021\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\036\uffa3\037\uffa3" +
    "\001\002\000\034\004\073\005\112\006\110\010\065\011" +
    "\044\016\105\022\045\040\066\050\074\051\106\052\104" +
    "\053\067\054\107\001\002\000\020\017\uffc4\021\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\036\127\037\uffc4\001\002\000\034" +
    "\004\073\005\112\006\110\010\065\011\044\016\105\022" +
    "\045\040\066\050\074\051\106\052\104\053\067\054\107" +
    "\001\002\000\024\017\uffc2\021\uffc2\030\131\031\132\032" +
    "\uffc2\033\uffc2\034\uffc2\036\uffc2\037\uffc2\001\002\000\034" +
    "\004\073\005\112\006\110\010\065\011\044\016\105\022" +
    "\045\040\066\050\074\051\106\052\104\053\067\054\107" +
    "\001\002\000\034\004\073\005\112\006\110\010\065\011" +
    "\044\016\105\022\045\040\066\050\074\051\106\052\104" +
    "\053\067\054\107\001\002\000\034\017\uffc0\021\uffc0\024" +
    "\137\025\136\026\134\027\135\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\036\uffc0\037\uffc0\001\002\000\034\004" +
    "\073\005\112\006\110\010\065\011\044\016\105\022\045" +
    "\040\066\050\074\051\106\052\104\053\067\054\107\001" +
    "\002\000\034\004\073\005\112\006\110\010\065\011\044" +
    "\016\105\022\045\040\066\050\074\051\106\052\104\053" +
    "\067\054\107\001\002\000\034\004\073\005\112\006\110" +
    "\010\065\011\044\016\105\022\045\040\066\050\074\051" +
    "\106\052\104\053\067\054\107\001\002\000\034\004\073" +
    "\005\112\006\110\010\065\011\044\016\105\022\045\040" +
    "\066\050\074\051\106\052\104\053\067\054\107\001\002" +
    "\000\040\007\141\010\142\017\uffbd\021\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\036\uffbd\037\uffbd\001\002\000\034\004\073\005" +
    "\112\006\110\010\065\011\044\016\105\022\045\040\066" +
    "\050\074\051\106\052\104\053\067\054\107\001\002\000" +
    "\034\004\073\005\112\006\110\010\065\011\044\016\105" +
    "\022\045\040\066\050\074\051\106\052\104\053\067\054" +
    "\107\001\002\000\046\007\uffb7\010\uffb7\011\146\012\145" +
    "\015\144\017\uffb7\021\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\036\uffb7" +
    "\037\uffb7\001\002\000\034\004\073\005\112\006\110\010" +
    "\065\011\044\016\105\022\045\040\066\050\074\051\106" +
    "\052\104\053\067\054\107\001\002\000\034\004\073\005" +
    "\112\006\110\010\065\011\044\016\105\022\045\040\066" +
    "\050\074\051\106\052\104\053\067\054\107\001\002\000" +
    "\034\004\073\005\112\006\110\010\065\011\044\016\105" +
    "\022\045\040\066\050\074\051\106\052\104\053\067\054" +
    "\107\001\002\000\046\007\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\015\uffb5\017\uffb5\021\uffb5\024\uffb5\025\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\036\uffb5" +
    "\037\uffb5\001\002\000\046\007\uffb4\010\uffb4\011\uffb4\012" +
    "\uffb4\015\uffb4\017\uffb4\021\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\036" +
    "\uffb4\037\uffb4\001\002\000\046\007\uffb3\010\uffb3\011\uffb3" +
    "\012\uffb3\015\uffb3\017\uffb3\021\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\036\uffb3\037\uffb3\001\002\000\046\007\uffb8\010\uffb8\011" +
    "\146\012\145\015\144\017\uffb8\021\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\036\uffb8\037\uffb8\001\002\000\040\007\141\010\142" +
    "\017\uffbc\021\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\036\uffbc\037\uffbc" +
    "\001\002\000\040\007\141\010\142\017\uffba\021\uffba\024" +
    "\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\036\uffba\037\uffba\001\002\000\040\007" +
    "\141\010\142\017\uffbb\021\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036" +
    "\uffbb\037\uffbb\001\002\000\034\017\uffbf\021\uffbf\024\137" +
    "\025\136\026\134\027\135\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\036\uffbf\037\uffbf\001\002\000\042\004\uffd2" +
    "\011\uffd2\022\uffd2\023\uffd2\041\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\045\uffd2\047\uffd2\056\uffd2\060\uffd2\063\uffd2\066\uffd2" +
    "\070\uffd2\072\uffd2\001\002\000\006\017\uffe6\032\uffe6\001" +
    "\002\000\006\017\163\032\162\001\002\000\034\004\073" +
    "\005\112\006\110\010\065\011\044\016\105\022\045\040" +
    "\066\050\074\051\106\052\104\053\067\054\107\001\002" +
    "\000\050\007\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015" +
    "\uffc5\017\uffc5\021\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\036\uffc5\037" +
    "\uffc5\001\002\000\010\017\uffe7\032\uffe7\037\125\001\002" +
    "\000\030\004\073\005\112\006\110\011\044\016\105\022" +
    "\045\050\074\051\106\052\104\053\067\054\107\001\002" +
    "\000\050\007\uffae\010\uffae\011\uffae\012\uffae\014\uffae\015" +
    "\uffae\017\uffae\021\uffae\024\uffae\025\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\036\uffae\037" +
    "\uffae\001\002\000\046\007\uffb0\010\uffb0\011\uffb0\012\uffb0" +
    "\015\uffb0\017\uffb0\021\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\036\uffb0" +
    "\037\uffb0\001\002\000\046\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\015\uffb1\017\uffb1\021\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\036" +
    "\uffb1\037\uffb1\001\002\000\060\007\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\001\002\000\006\021\173\037\125\001\002\000\060" +
    "\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\017\uffda\020\uffda\021\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\001\002\000\034\004\073" +
    "\005\112\006\110\010\065\011\044\016\105\022\045\040" +
    "\066\050\074\051\106\052\104\053\067\054\107\001\002" +
    "\000\006\017\176\037\125\001\002\000\004\033\177\001" +
    "\002\000\042\004\uffc9\011\uffc9\022\uffc9\023\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\045\uffc9\047\uffc9\056\uffc9\060" +
    "\uffc9\063\uffc9\066\uffc9\070\uffc9\072\uffc9\001\002\000\010" +
    "\020\062\023\202\035\063\001\002\000\060\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\001\002\000\060\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\001\002\000\060\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\001\002\000\006\013\206\033\205\001\002\000\042\004" +
    "\uffd4\011\uffd4\022\uffd4\023\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\047\uffd4\056\uffd4\060\uffd4\063\uffd4\066" +
    "\uffd4\070\uffd4\072\uffd4\001\002\000\034\004\073\005\112" +
    "\006\110\010\065\011\044\016\105\022\045\040\066\050" +
    "\074\051\106\052\104\053\067\054\107\001\002\000\006" +
    "\033\210\037\125\001\002\000\042\004\uffd3\011\uffd3\022" +
    "\uffd3\023\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\047\uffd3\056\uffd3\060\uffd3\063\uffd3\066\uffd3\070\uffd3\072" +
    "\uffd3\001\002\000\034\004\073\005\112\006\110\010\065" +
    "\011\044\016\105\022\045\040\066\050\074\051\106\052" +
    "\104\053\067\054\107\001\002\000\006\017\213\037\125" +
    "\001\002\000\004\022\031\001\002\000\044\004\uffd1\011" +
    "\uffd1\022\uffd1\023\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\047\uffd1\056\uffd1\060\uffd1\062\215\063\uffd1\066" +
    "\uffd1\070\uffd1\072\uffd1\001\002\000\004\022\031\001\002" +
    "\000\042\004\uffd0\011\uffd0\022\uffd0\023\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\056\uffd0\060\uffd0" +
    "\063\uffd0\066\uffd0\070\uffd0\072\uffd0\001\002\000\034\004" +
    "\073\005\112\006\110\010\065\011\044\016\105\022\045" +
    "\040\066\050\074\051\106\052\104\053\067\054\107\001" +
    "\002\000\006\017\221\037\125\001\002\000\004\022\222" +
    "\001\002\000\004\065\225\001\002\000\006\065\uffcc\067" +
    "\uffcc\001\002\000\006\065\225\067\233\001\002\000\034" +
    "\004\073\005\112\006\110\010\065\011\044\016\105\022" +
    "\045\040\066\050\074\051\106\052\104\053\067\054\107" +
    "\001\002\000\006\034\227\037\125\001\002\000\040\004" +
    "\uffe3\011\uffe3\022\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\047\uffe3\056\uffe3\060\uffe3\063\uffe3\066\uffe3\070" +
    "\uffe3\072\uffe3\001\002\000\040\004\037\011\044\022\045" +
    "\041\010\042\061\043\024\044\023\045\013\047\017\056" +
    "\034\060\041\063\040\066\231\070\036\072\052\001\002" +
    "\000\004\033\232\001\002\000\006\065\uffcb\067\uffcb\001" +
    "\002\000\004\034\237\001\002\000\006\065\uffcd\067\uffcd" +
    "\001\002\000\004\023\236\001\002\000\042\004\uffce\011" +
    "\uffce\022\uffce\023\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\047\uffce\056\uffce\060\uffce\063\uffce\066\uffce\070" +
    "\uffce\072\uffce\001\002\000\040\004\uffe3\011\uffe3\022\uffe3" +
    "\023\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\047" +
    "\uffe3\056\uffe3\060\uffe3\063\uffe3\070\uffe3\072\uffe3\001\002" +
    "\000\040\004\037\011\044\022\045\023\uffca\041\010\042" +
    "\061\043\024\044\023\045\013\047\017\056\034\060\041" +
    "\063\040\070\036\072\052\001\002\000\042\004\uffc7\011" +
    "\uffc7\022\uffc7\023\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\047\uffc7\056\uffc7\060\uffc7\063\uffc7\066\uffc7\070" +
    "\uffc7\072\uffc7\001\002\000\006\033\243\037\125\001\002" +
    "\000\042\004\uffc8\011\uffc8\022\uffc8\023\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\047\uffc8\056\uffc8\060\uffc8" +
    "\063\uffc8\066\uffc8\070\uffc8\072\uffc8\001\002\000\034\004" +
    "\073\005\112\006\110\010\065\011\044\016\105\022\045" +
    "\040\066\050\074\051\106\052\104\053\067\054\107\001" +
    "\002\000\006\017\246\037\125\001\002\000\004\022\031" +
    "\001\002\000\042\004\uffcf\011\uffcf\022\uffcf\023\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\047\uffcf\056\uffcf" +
    "\060\uffcf\063\uffcf\066\uffcf\070\uffcf\072\uffcf\001\002\000" +
    "\042\004\uffc6\011\uffc6\022\uffc6\023\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\047\uffc6\056\uffc6\060\uffc6\063" +
    "\uffc6\066\uffc6\070\uffc6\072\uffc6\001\002\000\004\022\252" +
    "\001\002\000\020\004\015\041\010\042\061\043\024\044" +
    "\023\045\013\047\017\001\002\000\022\004\015\023\255" +
    "\041\010\042\061\043\024\044\023\045\013\047\017\001" +
    "\002\000\022\004\ufff6\023\ufff6\041\ufff6\042\ufff6\043\ufff6" +
    "\044\ufff6\045\ufff6\047\ufff6\001\002\000\004\033\257\001" +
    "\002\000\022\004\ufff7\023\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\047\ufff7\001\002\000\024\004\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\064\ufff8\001\002\000\004\016\261\001\002\000\020\004" +
    "\015\041\010\042\061\043\024\044\023\045\013\047\017" +
    "\001\002\000\010\004\271\011\116\025\115\001\002\000" +
    "\006\017\265\032\264\001\002\000\020\004\015\041\010" +
    "\042\061\043\024\044\023\045\013\047\017\001\002\000" +
    "\004\022\031\001\002\000\024\004\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\064\uffeb\001" +
    "\002\000\010\004\270\011\116\025\115\001\002\000\006" +
    "\017\uffe9\032\uffe9\001\002\000\006\017\uffe8\032\uffe8\001" +
    "\002\000\004\013\273\001\002\000\004\022\274\001\002" +
    "\000\004\004\275\001\002\000\006\023\ufff9\032\ufff9\001" +
    "\002\000\006\023\300\032\277\001\002\000\004\004\302" +
    "\001\002\000\004\033\301\001\002\000\024\004\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\064\ufffb\001\002\000\006\023\ufffa\032\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\006\002\004\003\003\001\001\000\014\004" +
    "\017\006\010\010\020\011\021\046\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\027\001\001\000\002" +
    "\001\001\000\004\015\031\001\001\000\034\014\045\017" +
    "\046\020\054\021\047\022\055\023\053\027\050\030\034" +
    "\031\042\032\057\033\056\034\032\046\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\032\110\033\056\034\067\035\241\036\101\037\100\040" +
    "\077\041\076\042\075\043\074\044\071\045\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\202\001\001" +
    "\000\006\032\177\033\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\032\110\033\056\034\067\035" +
    "\171\036\101\037\100\040\077\041\076\042\075\043\074" +
    "\044\071\045\070\001\001\000\002\001\001\000\032\032" +
    "\110\033\056\034\067\035\102\036\101\037\100\040\077" +
    "\041\076\042\075\043\074\044\071\045\070\001\001\000" +
    "\016\032\110\033\056\034\067\043\167\044\071\045\070" +
    "\001\001\000\016\032\110\033\056\034\067\043\166\044" +
    "\071\045\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\032\110" +
    "\033\056\034\067\035\122\036\101\037\100\040\077\041" +
    "\076\042\075\043\074\044\071\045\070\001\001\000\002" +
    "\001\001\000\004\046\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\032\110\033" +
    "\056\034\067\036\125\037\100\040\077\041\076\042\075" +
    "\043\074\044\071\045\070\001\001\000\002\001\001\000" +
    "\026\032\110\033\056\034\067\037\127\040\077\041\076" +
    "\042\075\043\074\044\071\045\070\001\001\000\002\001" +
    "\001\000\024\032\110\033\056\034\067\040\155\041\076" +
    "\042\075\043\074\044\071\045\070\001\001\000\024\032" +
    "\110\033\056\034\067\040\132\041\076\042\075\043\074" +
    "\044\071\045\070\001\001\000\002\001\001\000\022\032" +
    "\110\033\056\034\067\041\154\042\075\043\074\044\071" +
    "\045\070\001\001\000\022\032\110\033\056\034\067\041" +
    "\153\042\075\043\074\044\071\045\070\001\001\000\022" +
    "\032\110\033\056\034\067\041\152\042\075\043\074\044" +
    "\071\045\070\001\001\000\022\032\110\033\056\034\067" +
    "\041\137\042\075\043\074\044\071\045\070\001\001\000" +
    "\002\001\001\000\020\032\110\033\056\034\067\042\151" +
    "\043\074\044\071\045\070\001\001\000\020\032\110\033" +
    "\056\034\067\042\142\043\074\044\071\045\070\001\001" +
    "\000\002\001\001\000\016\032\110\033\056\034\067\043" +
    "\150\044\071\045\070\001\001\000\016\032\110\033\056" +
    "\034\067\043\147\044\071\045\070\001\001\000\016\032" +
    "\110\033\056\034\067\043\146\044\071\045\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\160\001\001\000\002\001\001\000\032\032\110\033\056" +
    "\034\067\035\163\036\101\037\100\040\077\041\076\042" +
    "\075\043\074\044\071\045\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\032\110\033\056\034\067\045" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\032\110\033\056\034\067\035\174\036\101" +
    "\037\100\040\077\041\076\042\075\043\074\044\071\045" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\032\110\033\056\034\067\035\206\036\101\037" +
    "\100\040\077\041\076\042\075\043\074\044\071\045\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\032" +
    "\110\033\056\034\067\035\211\036\101\037\100\040\077" +
    "\041\076\042\075\043\074\044\071\045\070\001\001\000" +
    "\002\001\001\000\004\016\213\001\001\000\002\001\001" +
    "\000\004\016\215\001\001\000\002\001\001\000\032\032" +
    "\110\033\056\034\067\035\217\036\101\037\100\040\077" +
    "\041\076\042\075\043\074\044\071\045\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\223\025\222" +
    "\001\001\000\002\001\001\000\006\025\233\026\234\001" +
    "\001\000\032\032\110\033\056\034\067\035\225\036\101" +
    "\037\100\040\077\041\076\042\075\043\074\044\071\045" +
    "\070\001\001\000\002\001\001\000\004\015\227\001\001" +
    "\000\034\014\045\017\046\020\054\021\047\022\055\023" +
    "\053\027\050\030\034\031\042\032\057\033\056\034\032" +
    "\046\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\237\001\001\000\034\014\045\017" +
    "\046\020\054\021\047\022\055\023\053\027\050\030\034" +
    "\031\042\032\057\033\056\034\032\046\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\032\110\033\056\034\067\035\244\036\101\037\100\040" +
    "\077\041\076\042\075\043\074\044\071\045\070\001\001" +
    "\000\002\001\001\000\004\016\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\252" +
    "\017\253\046\041\001\001\000\006\017\255\046\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\262\046" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\266\001\001\000\004\016\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= Entrada FuncionMain 
            {
              Programa RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Fmain fmain = (Fmain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Programa(definiciones, fmain); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Entrada ::= Entrada Struct 
            {
              ListaDefiniciones RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StructClass str = (StructClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = definiciones; definiciones.addStruct(str); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Entrada ::= Entrada Enumerado 
            {
              ListaDefiniciones RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		EnumClass en = (EnumClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = definiciones; definiciones.addEnum(en); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Entrada ::= Entrada Funcion 
            {
              ListaDefiniciones RESULT =null;
		ListaDefiniciones definiciones = (ListaDefiniciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = definiciones; definiciones.addFuncion(f); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Entrada ::= 
            {
              ListaDefiniciones RESULT =null;
		 RESULT = new ListaDefiniciones(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Enumerado ::= ENUM IDEN IGUAL LAP DentroEnumerado LCIERRE PUNTOYCOMA 
            {
              EnumClass RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<String> valores = (List<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new EnumClass(nombre.lexema,valores); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Enumerado",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DentroEnumerado ::= DentroEnumerado COMA IDEN 
            {
              List<String> RESULT =null;
		List<String> restoValores = (List<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue valor = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = restoValores; restoValores.add(valor.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroEnumerado",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DentroEnumerado ::= IDEN 
            {
              List<String> RESULT =null;
		TokenValue valor = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(valor.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroEnumerado",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Struct ::= STRUCT IDEN LAP DentroStruct LCIERRE PUNTOYCOMA 
            {
              StructClass RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<DecClass> valores = (List<DecClass>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new StructClass(nombre.lexema,valores); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Struct",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DentroStruct ::= DentroStruct Declaracion 
            {
              List<DecClass> RESULT =null;
		List<DecClass> resto = (List<DecClass>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DecClass decl = (DecClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = resto; resto.add(decl); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroStruct",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DentroStruct ::= Declaracion 
            {
              List<DecClass> RESULT =null;
		DecClass decl = (DecClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<DecClass>(); RESULT.add(decl); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroStruct",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Tipo ::= INT 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tipo ::= VOID 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= FLOAT 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= BOOL 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= CHAR 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= STRING 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoBasicoClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= IDEN 
            {
              TipoClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoEstructuraClass(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= Tipo POR 
            {
              TipoClass RESULT =null;
		TipoClass tipo = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoPunteroClass(tipo); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= Tipo MENOR ENT MAYOR 
            {
              TipoClass RESULT =null;
		TipoClass tipo = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue num = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoArrayClass(tipo,num.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= Tipo MENOR MAYOR 
            {
              TipoClass RESULT =null;
		TipoClass tipo = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new TipoArrayClass(tipo, null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Funcion ::= Tipo IDEN PAP Args PCIERRE BloqueInstrucciones 
            {
              Funcion RESULT =null;
		TipoClass tipo = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<ParTipoIden> args = (List<ParTipoIden>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Funcion(tipo, nombre.lexema, args, ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FuncionMain ::= VOID MAIN PAP PCIERRE BloqueInstrucciones 
            {
              Fmain RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Fmain("main", ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FuncionMain",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Args ::= Args COMA Tipo IDEN 
            {
              List<ParTipoIden> RESULT =null;
		List<ParTipoIden> args = (List<ParTipoIden>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = args; args.add(new ParTipoIden(t,iden.lexema)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Args ::= Tipo IDEN 
            {
              List<ParTipoIden> RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<ParTipoIden>(); RESULT.add(new ParTipoIden(t,iden.lexema)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Params ::= Params COMA E0 
            {
              List<Expresion> RESULT =null;
		List<Expresion> params = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = params ; params.add(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Params ::= 
            {
              List<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BloqueInstrucciones ::= LAP Instrucciones LCIERRE 
            {
              List<Ins> RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = ins; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueInstrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instrucciones ::= Instrucciones Instruccion 
            {
              List<Ins> RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Ins elem = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ins; ins.add(elem); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instrucciones ::= 
            {
              List<Ins> RESULT =null;
		 RESULT = new ArrayList<Ins>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instruccion ::= Declaracion 
            {
              Ins RESULT =null;
		DecClass elem = (DecClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instruccion ::= Asignacion 
            {
              Ins RESULT =null;
		AsigClass elem = (AsigClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instruccion ::= If 
            {
              Ins RESULT =null;
		IfClass elem = (IfClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instruccion ::= While 
            {
              Ins RESULT =null;
		WhileClass elem = (WhileClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruccion ::= Switch 
            {
              Ins RESULT =null;
		SwitchClass elem = (SwitchClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instruccion ::= Print 
            {
              Ins RESULT =null;
		PrintClass elem = (PrintClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instruccion ::= Return 
            {
              Ins RESULT =null;
		ReturnClass elem = (ReturnClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion ::= InsLlamadaFuncion 
            {
              Ins RESULT =null;
		FuncallClass elem = (FuncallClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = elem; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Acceso0 ::= Acceso0 CAP E0 CCIERRE 
            {
              Acceso RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new AccesoArray(ref,exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso0",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Acceso0 ::= Acceso0 PUNTO IDEN 
            {
              Acceso RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue campo = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new AccesoStruct(ref,campo.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso0",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Acceso0 ::= Acceso1 
            {
              Acceso RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ref; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso0",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Acceso1 ::= IDEN 
            {
              Acceso RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new AccesoVar(nombre.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Acceso1 ::= POR Acceso1 
            {
              Acceso RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new AccesoPuntero(ref); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Acceso1 ::= LAP Acceso0 LCIERRE 
            {
              Acceso RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = ref; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Acceso1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Declaracion ::= Tipo IDEN PUNTOYCOMA 
            {
              DecClass RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DecClass(t,nombre.lexema,null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Declaracion ::= Tipo IDEN IGUAL E0 PUNTOYCOMA 
            {
              DecClass RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new DecClass(t,nombre.lexema,exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Asignacion ::= Acceso0 IGUAL E0 PUNTOYCOMA 
            {
              AsigClass RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new AsigClass(ref, exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // If ::= IF PAP E0 PCIERRE BloqueInstrucciones 
            {
              IfClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new IfClass(exp,ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // If ::= IF PAP E0 PCIERRE BloqueInstrucciones ELSE BloqueInstrucciones 
            {
              IfClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> inselse = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new IfClass(exp,ins,inselse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // While ::= WHILE PAP E0 PCIERRE BloqueInstrucciones 
            {
              WhileClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new WhileClass(exp,ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("While",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Switch ::= SWITCH PAP E0 PCIERRE LAP BloqueCase Default LCIERRE 
            {
              SwitchClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<CaseSwitch> casos = (List<CaseSwitch>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CaseSwitch def = (CaseSwitch)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 casos.add(def); RESULT = new SwitchClass(exp,casos); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Switch",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BloqueCase ::= BloqueCase Case 
            {
              List<CaseSwitch> RESULT =null;
		List<CaseSwitch> casos = (List<CaseSwitch>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CaseSwitch caso = (CaseSwitch)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = casos; casos.add(caso); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueCase",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BloqueCase ::= Case 
            {
              List<CaseSwitch> RESULT =null;
		CaseSwitch caso = (CaseSwitch)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<CaseSwitch>(); RESULT.add(caso); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueCase",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Case ::= CASE E0 DOSPUNTOS Instrucciones BREAK PUNTOYCOMA 
            {
              CaseSwitch RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new CaseSwitch(exp,ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Case",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Default ::= DEFAULT DOSPUNTOS Instrucciones 
            {
              CaseSwitch RESULT =null;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new CaseSwitch(ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Default",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Print ::= PRINT PAP E0 PCIERRE PUNTOYCOMA 
            {
              PrintClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new PrintClass(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Print",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Return ::= RETURN E0 PUNTOYCOMA 
            {
              ReturnClass RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ReturnClass(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Return",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Return ::= RETURN PUNTOYCOMA 
            {
              ReturnClass RESULT =null;
		 RESULT = new ReturnClass(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Return",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // InsLlamadaFuncion ::= LlamadaFuncion PUNTOYCOMA 
            {
              FuncallClass RESULT =null;
		FuncallExp funcion = (FuncallExp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new FuncallClass(funcion); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsLlamadaFuncion",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LlamadaFuncion ::= IDEN PAP Params PCIERRE 
            {
              FuncallExp RESULT =null;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<Expresion> params = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new FuncallExp(nombre.lexema,params); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E0 ::= E0 OR E1 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpOr(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E0 ::= E1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E1 ::= E1 AND E2 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpAnd(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E2 ::= E2 IGUALDAD E3 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpIgualdad(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E2 ::= E2 DISTINTO E3 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpDesigualdad(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E3 ::= E3 MAYOR E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMayor(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E3 ::= E3 MENOR E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMenor(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E3 ::= E3 MAYORIGUAL E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMayorigual(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E3 ::= E3 MENORIGUAL E4 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMenorigual(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E4 ::= E4 MAS E5 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpSuma(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E4 ::= E4 MENOS E5 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpResta(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E5 ::= E5 POR E6 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpMult(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E5 ::= E5 DIV E6 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpDiv(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E5 ::= E5 MOD E6 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpModulo(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E5 ::= E6 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E6 ::= MENOS E6 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpCambioSigno(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E6 ::= NEG E6 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpNegar(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E6 ::= E7 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E7 ::= E7 POTENCIA E8 
            {
              Expresion RESULT =null;
		Expresion expizq = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion expdcha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new OpPotencia(expizq,expdcha); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E7 ::= E8 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E8 ::= TRUE 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E8 ::= FALSE 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E8 ::= ENT 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E8 ::= REAL 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E8 ::= CARACTER 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E8 ::= CADENA 
            {
              Expresion RESULT =null;
		TokenValue cte = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Constante(cte.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E8 ::= Acceso0 
            {
              Expresion RESULT =null;
		Acceso ref = (Acceso)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ref; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E8 ::= LlamadaFuncion 
            {
              Expresion RESULT =null;
		FuncallExp llamada = (FuncallExp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = llamada; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E8 ::= NEW Tipo PAP PCIERRE 
            {
              Expresion RESULT =null;
		TipoClass t = (TipoClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new NewExp(t); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E8 ::= PAP E0 PCIERRE 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

