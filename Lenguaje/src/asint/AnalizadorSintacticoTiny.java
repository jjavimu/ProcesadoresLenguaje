
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Apr 18 11:30:15 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Apr 18 11:30:15 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\005\011" +
    "\000\002\006\005\000\002\006\003\000\002\003\010\000" +
    "\002\004\004\000\002\004\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\010\010\000\002\007\007" +
    "\000\002\011\006\000\002\011\004\000\002\011\002\000" +
    "\002\012\006\000\002\013\005\000\002\013\003\000\002" +
    "\013\002\000\002\015\005\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\003\000" +
    "\002\014\003\000\002\014\002\000\002\025\004\000\002" +
    "\016\005\000\002\016\004\000\002\016\005\000\002\017" +
    "\006\000\002\020\007\000\002\020\011\000\002\021\007" +
    "\000\002\022\011\000\002\023\011\000\002\023\005\000" +
    "\002\034\007\000\002\035\005\000\002\035\004\000\002" +
    "\026\005\000\002\026\003\000\002\027\004\000\002\027" +
    "\004\000\002\027\003\000\002\030\005\000\002\030\005" +
    "\000\002\030\003\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\003\000\002\032\005\000\002\032\005" +
    "\000\002\032\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\022\040\006\041\012\042\020\043\021\044" +
    "\010\045\004\051\014\062\011\001\002\000\004\004\247" +
    "\001\002\000\022\040\006\041\012\042\020\043\021\044" +
    "\010\045\004\051\014\062\011\001\002\000\004\004\ufff6" +
    "\001\002\000\004\004\235\001\002\000\004\004\ufff3\001" +
    "\002\000\004\004\225\001\002\000\006\004\ufff5\067\025" +
    "\001\002\000\004\002\024\001\002\000\004\004\ufff1\001" +
    "\002\000\022\040\006\041\012\042\020\043\021\044\010" +
    "\045\004\051\014\062\011\001\002\000\004\002\ufffd\001" +
    "\002\000\022\040\006\041\012\042\020\043\021\044\010" +
    "\045\004\051\014\062\011\001\002\000\004\004\ufff2\001" +
    "\002\000\004\004\ufff4\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\000\001\002\000" +
    "\004\016\026\001\002\000\004\017\027\001\002\000\004" +
    "\036\031\001\002\000\004\002\uffef\001\002\000\034\004" +
    "\037\037\uffdd\040\006\041\054\042\020\043\021\044\010" +
    "\051\014\054\034\056\041\061\040\066\036\070\047\001" +
    "\002\000\036\004\037\037\uffdd\040\006\041\054\042\020" +
    "\043\021\044\010\051\014\054\034\056\041\061\040\064" +
    "\uffdd\066\036\070\047\001\002\000\004\030\223\001\002" +
    "\000\004\016\217\001\002\000\006\037\uffde\064\uffde\001" +
    "\002\000\030\004\065\005\063\006\073\010\062\016\064" +
    "\030\214\035\077\046\066\047\070\050\102\051\067\001" +
    "\002\000\010\004\212\013\161\016\142\001\002\000\004" +
    "\016\172\001\002\000\004\016\164\001\002\000\004\004" +
    "\157\001\002\000\036\004\037\037\uffdd\040\006\041\054" +
    "\042\020\043\021\044\010\051\014\054\034\056\041\061" +
    "\040\064\uffdd\066\036\070\047\001\002\000\036\004\037" +
    "\037\uffdd\040\006\041\054\042\020\043\021\044\010\051" +
    "\014\054\034\056\041\061\040\064\uffdd\066\036\070\047" +
    "\001\002\000\036\004\037\037\uffdd\040\006\041\054\042" +
    "\020\043\021\044\010\051\014\054\034\056\041\061\040" +
    "\064\uffdd\066\036\070\047\001\002\000\006\037\uffdf\064" +
    "\uffdf\001\002\000\004\016\061\001\002\000\036\004\037" +
    "\037\uffdd\040\006\041\054\042\020\043\021\044\010\051" +
    "\014\054\034\056\041\061\040\064\uffdd\066\036\070\047" +
    "\001\002\000\036\004\037\037\uffdd\040\006\041\054\042" +
    "\020\043\021\044\010\051\014\054\034\056\041\061\040" +
    "\064\uffdd\066\036\070\047\001\002\000\004\037\056\001" +
    "\002\000\036\004\037\037\uffdd\040\006\041\054\042\020" +
    "\043\021\044\010\051\014\054\034\056\041\061\040\064" +
    "\uffdd\066\036\070\047\001\002\000\004\004\ufff5\001\002" +
    "\000\006\037\uffe3\064\uffe3\001\002\000\046\002\uffe7\004" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\045\uffe7\051\uffe7\054\uffe7\056\uffe7\060\uffe7\061\uffe7\062" +
    "\uffe7\064\uffe7\066\uffe7\070\uffe7\001\002\000\006\037\uffe5" +
    "\064\uffe5\001\002\000\006\037\uffe2\064\uffe2\001\002\000" +
    "\026\004\065\005\063\006\073\010\062\016\064\035\077" +
    "\046\066\047\070\050\102\051\067\001\002\000\026\004" +
    "\065\005\063\006\073\010\062\016\064\035\077\046\066" +
    "\047\070\050\102\051\067\001\002\000\046\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\014\uffb7\015\uffb7\017\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\034\uffb7\001\002\000\026\004\065" +
    "\005\063\006\073\010\062\016\064\035\077\046\066\047" +
    "\070\050\102\051\067\001\002\000\050\007\uffb3\010\uffb3" +
    "\011\uffb3\012\uffb3\014\uffb3\015\uffb3\016\142\017\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\001\002\000\046\007" +
    "\uffb9\010\uffb9\011\uffb9\012\uffb9\014\uffb9\015\uffb9\017\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\001\002\000\046" +
    "\007\uffb4\010\uffb4\011\uffb4\012\uffb4\014\uffb4\015\uffb4\017" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\001\002\000" +
    "\046\007\uffb8\010\uffb8\011\uffb8\012\uffb8\014\uffb8\015\uffb8" +
    "\017\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\001\002" +
    "\000\046\007\uffb2\010\uffb2\011\uffb2\012\uffb2\014\uffb2\015" +
    "\uffb2\017\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\001" +
    "\002\000\046\007\uffba\010\uffba\011\uffba\012\uffba\014\uffba" +
    "\015\uffba\017\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\001\002\000\046\007\uffb6\010\uffb6\011\uffb6\012\uffb6\014" +
    "\uffb6\015\uffb6\017\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\001\002\000\046\007\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\014\uffbd\015\uffbd\017\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\125" +
    "\034\126\001\002\000\042\007\120\010\115\011\uffc7\012" +
    "\uffc7\014\uffc7\015\117\017\uffc7\022\122\023\116\024\121" +
    "\025\113\026\123\027\uffc7\030\uffc7\031\uffc7\032\114\001" +
    "\002\000\020\011\111\012\110\014\uffca\017\uffca\027\uffca" +
    "\030\uffca\031\uffca\001\002\000\026\004\065\005\063\006" +
    "\073\010\062\016\064\035\077\046\066\047\070\050\102" +
    "\051\067\001\002\000\014\014\uffcd\017\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\001\002\000\006\014\104\017\103\001\002" +
    "\000\046\007\uffb5\010\uffb5\011\uffb5\012\uffb5\014\uffb5\015" +
    "\uffb5\017\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\001" +
    "\002\000\004\030\106\001\002\000\026\004\065\005\063" +
    "\006\073\010\062\016\064\035\077\046\066\047\070\050" +
    "\102\051\067\001\002\000\014\014\uffce\017\uffce\027\uffce" +
    "\030\uffce\031\uffce\001\002\000\036\004\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\051\uffd1\054\uffd1" +
    "\056\uffd1\061\uffd1\064\uffd1\066\uffd1\070\uffd1\001\002\000" +
    "\014\014\uffcc\017\uffcc\027\uffcc\030\uffcc\031\uffcc\001\002" +
    "\000\022\004\065\005\063\006\073\016\064\046\066\047" +
    "\070\050\102\051\067\001\002\000\022\004\065\005\063" +
    "\006\073\016\064\046\066\047\070\050\102\051\067\001" +
    "\002\000\042\007\120\010\115\011\uffc9\012\uffc9\014\uffc9" +
    "\015\117\017\uffc9\022\122\023\116\024\121\025\113\026" +
    "\123\027\uffc9\030\uffc9\031\uffc9\032\114\001\002\000\022" +
    "\004\065\005\063\006\073\016\064\046\066\047\070\050" +
    "\102\051\067\001\002\000\022\004\065\005\063\006\073" +
    "\016\064\046\066\047\070\050\102\051\067\001\002\000" +
    "\022\004\065\005\063\006\073\016\064\046\066\047\070" +
    "\050\102\051\067\001\002\000\022\004\065\005\063\006" +
    "\073\016\064\046\066\047\070\050\102\051\067\001\002" +
    "\000\022\004\065\005\063\006\073\016\064\046\066\047" +
    "\070\050\102\051\067\001\002\000\022\004\065\005\063" +
    "\006\073\016\064\046\066\047\070\050\102\051\067\001" +
    "\002\000\022\004\065\005\063\006\073\016\064\046\066" +
    "\047\070\050\102\051\067\001\002\000\022\004\065\005" +
    "\063\006\073\016\064\046\066\047\070\050\102\051\067" +
    "\001\002\000\022\004\065\005\063\006\073\016\064\046" +
    "\066\047\070\050\102\051\067\001\002\000\046\007\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\014\uffc1\015\uffc1\017\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\125\034\126\001\002\000\022\004" +
    "\065\005\063\006\073\016\064\046\066\047\070\050\102" +
    "\051\067\001\002\000\022\004\065\005\063\006\073\016" +
    "\064\046\066\047\070\050\102\051\067\001\002\000\046" +
    "\007\uffbb\010\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb\017" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\001\002\000" +
    "\046\007\uffbc\010\uffbc\011\uffbc\012\uffbc\014\uffbc\015\uffbc" +
    "\017\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\001\002" +
    "\000\046\007\uffc6\010\uffc6\011\uffc6\012\uffc6\014\uffc6\015" +
    "\uffc6\017\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\125\034\126\001" +
    "\002\000\046\007\uffc4\010\uffc4\011\uffc4\012\uffc4\014\uffc4" +
    "\015\uffc4\017\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\125\034\126" +
    "\001\002\000\046\007\uffc0\010\uffc0\011\uffc0\012\uffc0\014" +
    "\uffc0\015\uffc0\017\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\125\034" +
    "\126\001\002\000\046\007\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\014\uffbe\015\uffbe\017\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\125" +
    "\034\126\001\002\000\046\007\uffc5\010\uffc5\011\uffc5\012" +
    "\uffc5\014\uffc5\015\uffc5\017\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\125\034\126\001\002\000\046\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\014\uffbf\015\uffbf\017\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\125\034\126\001\002\000\046\007\uffc2\010\uffc2\011" +
    "\uffc2\012\uffc2\014\uffc2\015\uffc2\017\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\125\034\126\001\002\000\046\007\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\014\uffc3\015\uffc3\017\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\125\034\126\001\002\000\042\007\120\010" +
    "\115\011\uffc8\012\uffc8\014\uffc8\015\117\017\uffc8\022\122" +
    "\023\116\024\121\025\113\026\123\027\uffc8\030\uffc8\031" +
    "\uffc8\032\114\001\002\000\030\004\065\005\063\006\073" +
    "\010\062\016\064\017\uffe8\035\077\046\066\047\070\050" +
    "\102\051\067\001\002\000\010\014\104\017\uffe9\027\146" +
    "\001\002\000\004\017\145\001\002\000\046\007\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\014\uffeb\015\uffeb\017\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\001\002\000\030\004\065" +
    "\005\063\006\073\010\062\016\064\017\uffe8\035\077\046" +
    "\066\047\070\050\102\051\067\001\002\000\004\017\uffea" +
    "\001\002\000\006\014\104\017\151\001\002\000\046\007" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\014\uffb1\015\uffb1\017\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\001\002\000\014" +
    "\014\uffcb\017\uffcb\027\uffcb\030\uffcb\031\uffcb\001\002\000" +
    "\006\037\uffe4\064\uffe4\001\002\000\006\037\uffe6\064\uffe6" +
    "\001\002\000\006\037\uffe0\064\uffe0\001\002\000\036\004" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\051\uffda\054\uffda\056\uffda\061\uffda\064\uffda\066\uffda\070" +
    "\uffda\001\002\000\006\013\161\030\160\001\002\000\036" +
    "\004\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044" +
    "\uffdb\051\uffdb\054\uffdb\056\uffdb\061\uffdb\064\uffdb\066\uffdb" +
    "\070\uffdb\001\002\000\026\004\065\005\063\006\073\010" +
    "\062\016\064\035\077\046\066\047\070\050\102\051\067" +
    "\001\002\000\006\014\104\030\163\001\002\000\036\004" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\051\uffd8\054\uffd8\056\uffd8\061\uffd8\064\uffd8\066\uffd8\070" +
    "\uffd8\001\002\000\026\004\065\005\063\006\073\010\062" +
    "\016\064\035\077\046\066\047\070\050\102\051\067\001" +
    "\002\000\006\014\104\017\166\001\002\000\004\036\031" +
    "\001\002\000\040\004\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\044\uffd7\051\uffd7\054\uffd7\056\uffd7\060\170" +
    "\061\uffd7\064\uffd7\066\uffd7\070\uffd7\001\002\000\004\036" +
    "\031\001\002\000\036\004\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\051\uffd6\054\uffd6\056\uffd6\061" +
    "\uffd6\064\uffd6\066\uffd6\070\uffd6\001\002\000\004\004\173" +
    "\001\002\000\004\017\174\001\002\000\004\036\175\001" +
    "\002\000\006\063\200\065\176\001\002\000\004\031\210" +
    "\001\002\000\004\037\207\001\002\000\026\004\065\005" +
    "\063\006\073\010\062\016\064\035\077\046\066\047\070" +
    "\050\102\051\067\001\002\000\006\014\104\031\202\001" +
    "\002\000\034\004\037\040\006\041\054\042\020\043\021" +
    "\044\010\051\014\054\034\056\041\061\040\064\uffdd\066" +
    "\036\070\047\001\002\000\004\064\204\001\002\000\004" +
    "\030\205\001\002\000\006\063\200\065\176\001\002\000" +
    "\004\037\uffd3\001\002\000\036\004\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\051\uffd4\054\uffd4\056" +
    "\uffd4\061\uffd4\064\uffd4\066\uffd4\070\uffd4\001\002\000\034" +
    "\004\037\037\uffdd\040\006\041\054\042\020\043\021\044" +
    "\010\051\014\054\034\056\041\061\040\066\036\070\047" +
    "\001\002\000\004\037\uffd2\001\002\000\004\030\213\001" +
    "\002\000\036\004\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\051\uffd9\054\uffd9\056\uffd9\061\uffd9\064" +
    "\uffd9\066\uffd9\070\uffd9\001\002\000\006\037\uffcf\064\uffcf" +
    "\001\002\000\006\014\104\030\216\001\002\000\006\037" +
    "\uffd0\064\uffd0\001\002\000\026\004\065\005\063\006\073" +
    "\010\062\016\064\035\077\046\066\047\070\050\102\051" +
    "\067\001\002\000\006\014\104\017\221\001\002\000\004" +
    "\036\031\001\002\000\036\004\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\051\uffd5\054\uffd5\056\uffd5" +
    "\061\uffd5\064\uffd5\066\uffd5\070\uffd5\001\002\000\006\037" +
    "\uffdc\064\uffdc\001\002\000\006\037\uffe1\064\uffe1\001\002" +
    "\000\004\036\226\001\002\000\020\004\227\040\006\041" +
    "\054\042\020\043\021\044\010\051\014\001\002\000\004" +
    "\004\212\001\002\000\004\037\233\001\002\000\022\004" +
    "\227\037\ufff7\040\006\041\054\042\020\043\021\044\010" +
    "\051\014\001\002\000\004\037\ufff8\001\002\000\004\030" +
    "\234\001\002\000\022\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\044\ufff9\045\ufff9\051\ufff9\062\ufff9\001\002\000\004\016" +
    "\236\001\002\000\020\017\uffec\040\006\041\054\042\020" +
    "\043\021\044\010\051\014\001\002\000\004\017\244\001" +
    "\002\000\004\004\241\001\002\000\006\017\uffed\027\242" +
    "\001\002\000\020\017\uffec\040\006\041\054\042\020\043" +
    "\021\044\010\051\014\001\002\000\004\017\uffee\001\002" +
    "\000\004\036\031\001\002\000\022\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\051\ufff0\062\ufff0\001\002" +
    "\000\004\002\001\001\002\000\004\013\250\001\002\000" +
    "\004\036\251\001\002\000\004\004\252\001\002\000\006" +
    "\027\256\037\ufffa\001\002\000\004\037\254\001\002\000" +
    "\004\030\255\001\002\000\022\040\ufffc\041\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\051\ufffc\062\ufffc\001\002\000" +
    "\004\004\252\001\002\000\004\037\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\016\002\012\003\014\005\004\007\015\010" +
    "\016\036\006\001\001\000\002\001\001\000\016\002\245" +
    "\003\014\005\004\007\015\010\016\036\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\022\003\014\005\004\007\015\010\016" +
    "\036\006\001\001\000\002\001\001\000\016\002\021\003" +
    "\014\005\004\007\015\010\016\036\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\027\001\001\000\002\001\001\000\032\012" +
    "\032\014\051\016\043\017\050\020\044\021\052\022\047" +
    "\024\031\025\034\034\042\035\045\036\041\001\001\000" +
    "\032\012\032\014\223\016\043\017\050\020\044\021\052" +
    "\022\047\024\031\025\034\034\042\035\045\036\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\070\026\214\027\077\030\075\031\074\032" +
    "\073\033\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\155\001\001\000\032\012" +
    "\032\014\154\016\043\017\050\020\044\021\052\022\047" +
    "\024\031\025\034\034\042\035\045\036\041\001\001\000" +
    "\032\012\032\014\153\016\043\017\050\020\044\021\052" +
    "\022\047\024\031\025\034\034\042\035\045\036\041\001" +
    "\001\000\032\012\032\014\152\016\043\017\050\020\044" +
    "\021\052\022\047\024\031\025\034\034\042\035\045\036" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\012\032\014\057\016\043\017\050\020\044\021\052\022" +
    "\047\024\031\025\034\034\042\035\045\036\041\001\001" +
    "\000\032\012\032\014\056\016\043\017\050\020\044\021" +
    "\052\022\047\024\031\025\034\034\042\035\045\036\041" +
    "\001\001\000\002\001\001\000\032\012\032\014\054\016" +
    "\043\017\050\020\044\021\052\022\047\024\031\025\034" +
    "\034\042\035\045\036\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\012\070\026\100\027\077\030\075\031" +
    "\074\032\073\033\071\001\001\000\016\012\070\027\151" +
    "\030\075\031\074\032\073\033\071\001\001\000\002\001" +
    "\001\000\020\012\070\026\147\027\077\030\075\031\074" +
    "\032\073\033\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\070\027\106" +
    "\030\075\031\074\032\073\033\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\070\027\104\030\075\031\074\032\073\033" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\070\031\140\032\073\033\071\001" +
    "\001\000\012\012\070\031\111\032\073\033\071\001\001" +
    "\000\002\001\001\000\010\012\070\032\137\033\071\001" +
    "\001\000\010\012\070\032\136\033\071\001\001\000\010" +
    "\012\070\032\135\033\071\001\001\000\010\012\070\032" +
    "\134\033\071\001\001\000\010\012\070\032\133\033\071" +
    "\001\001\000\010\012\070\032\132\033\071\001\001\000" +
    "\010\012\070\032\131\033\071\001\001\000\010\012\070" +
    "\032\130\033\071\001\001\000\010\012\070\032\123\033" +
    "\071\001\001\000\002\001\001\000\006\012\070\033\127" +
    "\001\001\000\006\012\070\033\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\012\070\013\143\026\142\027\077\030" +
    "\075\031\074\032\073\033\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\070\013" +
    "\146\026\142\027\077\030\075\031\074\032\073\033\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\070\026\161\027\077\030\075" +
    "\031\074\032\073\033\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\070\026\164\027\077\030\075" +
    "\031\074\032\073\033\071\001\001\000\002\001\001\000" +
    "\004\015\166\001\001\000\002\001\001\000\004\015\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\012\070\026\200\027" +
    "\077\030\075\031\074\032\073\033\071\001\001\000\002" +
    "\001\001\000\032\012\032\014\202\016\043\017\050\020" +
    "\044\021\052\022\047\024\031\025\034\034\042\035\045" +
    "\036\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\012\032\014\210\016\043\017\050\020\044\021" +
    "\052\022\047\024\031\025\034\034\042\035\045\036\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\070\026\217\027\077\030\075\031\074\032" +
    "\073\033\071\001\001\000\002\001\001\000\004\015\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\227\016\230\036\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\231\016\230\036\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\236\036\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\242\036\237\001\001\000" +
    "\002\001\001\000\004\015\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\256\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= Enumerado S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= Struct S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= Funcion S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= FuncionMain 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Enumerado ::= ENUM IDEN IGUAL LAP DentroEnumerado LCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Enumerado",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DentroEnumerado ::= IDEN COMA DentroEnumerado 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroEnumerado",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DentroEnumerado ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroEnumerado",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Struct ::= STRUCT IDEN LAP DentroStruct LCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Struct",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DentroStruct ::= Declaracion DentroStruct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroStruct",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DentroStruct ::= Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DentroStruct",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Tipo ::= VOID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Funcion ::= Tipo IDEN PAP Args PCIERRE BloqueInstrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Funcion",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FuncionMain ::= VOID MAIN PAP PCIERRE BloqueInstrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FuncionMain",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Args ::= Tipo IDEN COMA Args 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Args ::= Tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Args ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Args",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LlamadaFuncion ::= IDEN PAP Params PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Params ::= E0 COMA Params 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Params ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BloqueInstrucciones ::= LAP Instrucciones LCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueInstrucciones",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instrucciones ::= Declaracion Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instrucciones ::= Asignacion Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instrucciones ::= If Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instrucciones ::= While Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instrucciones ::= Switch Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instrucciones ::= For Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instrucciones ::= Print Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instrucciones ::= Return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instrucciones ::= InsLlamadaFuncion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instrucciones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // InsLlamadaFuncion ::= LlamadaFuncion PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsLlamadaFuncion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Declaracion ::= Tipo IDEN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Declaracion ::= Tipo Asignacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Declaracion ::= IDEN IDEN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Asignacion ::= IDEN IGUAL E0 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // If ::= IF PAP E0 PCIERRE BloqueInstrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // If ::= IF PAP E0 PCIERRE BloqueInstrucciones ELSE BloqueInstrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // While ::= WHILE PAP E0 PCIERRE BloqueInstrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("While",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Switch ::= SWITCH PAP IDEN PCIERRE LAP BloqueCase LCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Switch",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BloqueCase ::= CASE E0 DOSPUNTOS Instrucciones BREAK PUNTOYCOMA BloqueCase 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueCase",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BloqueCase ::= DEFAULT DOSPUNTOS Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BloqueCase",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Print ::= PRINT PAP E0 PCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Print",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Return ::= RETURN E0 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Return",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Return ::= RETURN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Return",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E0 ::= E0 POTENCIA E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E1 ::= NEG E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E1 ::= MENOS E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E2 ::= E2 POR E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E2 ::= E2 DIV E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E3 ::= E3 MAYOR E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E3 ::= E3 MENOR E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E3 ::= E3 MAYORIGUAL E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E3 ::= E3 MENORIGUAL E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E3 ::= E3 IGUALDAD E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E3 ::= E3 DISTINTO E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E3 ::= E3 MAS E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E3 ::= E3 MENOS E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E3 ::= E3 MOD E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E4 ::= E4 AND E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E4 ::= E4 OR E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E5 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E5 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E5 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E5 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E5 ::= CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E5 ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E5 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E5 ::= LlamadaFuncion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E5 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

