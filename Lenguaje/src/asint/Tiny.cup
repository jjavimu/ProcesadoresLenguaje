package asint;

import java_cup.runtime.*;
import alex.*;
import asint.*;
import ast.*;
import ast.estructuras.*;
import ast.accesos.*;
import ast.expresiones.*;
import ast.funciones.*;
import ast.instrucciones.*;
import ast.tipos.*;
import errors.GestionErroresTiny;
import java.util.*;


scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal TokenValue IDEN, ENT, REAL, 
             MAS, MENOS, POR, DIV, IGUAL, POTENCIA, MOD,
             PAP, PCIERRE, CAP, CCIERRE, LAP, LCIERRE,
             MAYOR, MENOR, MAYORIGUAL, MENORIGUAL, DISTINTO, IGUALDAD,
             COMA, PUNTOYCOMA, DOSPUNTOS, PUNTO,
             AND, OR, NEG,
             INT, VOID, CHAR, FLOAT, BOOL, ENUM, STRING, 
             TRUE, FALSE, CARACTER, CADENA, 
             NEW, REF, 
             WHILE, FOR, IF, ELSIF, ELSE, SWITCH, STRUCT, CASE, BREAK, DEFAULT,
             RETURN, MAIN, PRINT;


non terminal Programa S;
non terminal ListaDefiniciones Entrada;
non terminal StructClass Struct ;
non terminal List<DecClass> DentroStruct;
non terminal EnumClass Enumerado;
non terminal List<String> DentroEnumerado;
non terminal Fmain FuncionMain;
non terminal Funcion Funcion;
non terminal List<ParTipoIden> Args;
non terminal List<Expresion> Params;

non terminal Ins Instruccion;
non terminal List<Ins> Instrucciones;
non terminal List<Ins> BloqueInstrucciones;
non terminal DecClass Declaracion;
non terminal AsigClass Asignacion;
non terminal IfClass If; 
non terminal WhileClass While;
non terminal ForClass For;
non terminal SwitchClass Switch;
non terminal List<CaseSwitch> BloqueCase;
non terminal CaseSwitch Case;
non terminal CaseSwitch Default;
non terminal ReturnClass Return;
non terminal FuncallClass InsLlamadaFuncion;
non terminal PrintClass Print;

non terminal Acceso Acceso0;
non terminal Acceso Acceso1;
non terminal FuncallExp LlamadaFuncion;
non terminal Expresion E0;
non terminal Expresion E1;
non terminal Expresion E2;
non terminal Expresion E3;
non terminal Expresion E4;
non terminal Expresion E5;
non terminal Expresion E6;
non terminal Expresion E7;
non terminal Expresion E8;


non terminal TipoClass Tipo;

// Programa
S ::= Entrada:definiciones FuncionMain:fmain 
      {: RESULT = new Programa(definiciones, fmain); :};

Entrada ::=  Entrada:definiciones Struct:str
            {: RESULT = definiciones; definiciones.addStruct(str); :}
            | Entrada:definiciones Enumerado:en
            {: RESULT = definiciones; definiciones.addEnum(en); :}
            | Entrada:definiciones Funcion:f 
            {: RESULT = definiciones; definiciones.addFuncion(f); :}
            | 
            {: RESULT = new ListaDefiniciones(); :};

// Enumerado
Enumerado ::= ENUM IDEN:nombre IGUAL LAP DentroEnumerado:valores LCIERRE PUNTOYCOMA
      {: RESULT = new EnumClass(nombre.lexema,valores); :};

DentroEnumerado ::= DentroEnumerado:restoValores COMA IDEN:valor
                  {: RESULT = restoValores; restoValores.add(valor.lexema); :}
                  | IDEN:valor
                  {: RESULT = new ArrayList<String>(); RESULT.add(valor.lexema); :};

// Struct
Struct ::= STRUCT IDEN:nombre LAP DentroStruct:valores LCIERRE PUNTOYCOMA
      {: RESULT = new StructClass(nombre.lexema,valores); :};

DentroStruct ::= DentroStruct:resto Declaracion:decl
                  {: RESULT = resto; resto.add(decl); :}
                  | Declaracion:decl
                  {: RESULT = new ArrayList<DecClass>(); RESULT.add(decl); :};


// Tipo de funciones/variables
//************************************* Array, Puntero, String
Tipo ::= INT: id
         {: RESULT = new TipoBasicoClass(id.lexema); :}  
         | VOID: id
         {: RESULT = new TipoBasicoClass(id.lexema); :} 
         | FLOAT: id
         {: RESULT = new TipoBasicoClass(id.lexema); :} 
         | BOOL: id
         {: RESULT = new TipoBasicoClass(id.lexema); :}  
         | CHAR: id
         {: RESULT = new TipoBasicoClass(id.lexema); :}  
         | STRING: id
         {: RESULT = new TipoBasicoClass(id.lexema); :}
         | IDEN: id
         {: RESULT = new TipoEstructuraClass(id.lexema); :}
         | Tipo:tipo POR 
         {: RESULT = new TipoPunteroClass(tipo); :}
         | Tipo:tipo MENOR ENT:num MAYOR
         {: RESULT = new TipoArrayClass(tipo,num.lexema); :}
         | Tipo:tipo MENOR MAYOR
         {: RESULT = new TipoArrayClass(tipo, null); :};
         

//Funcion y funcion main
Funcion ::= Tipo:tipo IDEN:nombre PAP Args:args PCIERRE BloqueInstrucciones:ins
      {: RESULT = new Funcion(tipo, nombre.lexema, args, ins); :};

FuncionMain ::= VOID MAIN PAP PCIERRE BloqueInstrucciones:ins
      {: RESULT = new Fmain("main", ins); :};

Args ::= Args:args COMA Tipo:t IDEN:iden
            {: RESULT = args; args.add(new ParTipoIden(t,iden.lexema)); :}
            | Tipo:t IDEN:iden 
            {: RESULT = new ArrayList<ParTipoIden>(); RESULT.add(new ParTipoIden(t,iden.lexema)); :}
            |
            {: RESULT = new ArrayList<ParTipoIden>(); :};                   


Params ::= Params:params COMA E0:exp 
            {: RESULT = params ; params.add(exp); :}
            | E0:exp 
            {: RESULT =  new ArrayList<Expresion>(); RESULT.add(exp);  :}
            |
            {: RESULT = new ArrayList<Expresion>(); :};

// Instrucciones
BloqueInstrucciones ::= LAP Instrucciones:ins LCIERRE
      {: RESULT = ins; :};

Instrucciones ::= Instrucciones:ins Instruccion:elem
                  {: RESULT = ins; ins.add(elem); :} 
			|
                  {: RESULT = new ArrayList<Ins>(); :};

Instruccion ::= Declaracion:elem 
                  {: RESULT = elem; :}
                  | Asignacion:elem
                  {: RESULT = elem; :} 
                  | If:elem
                  {: RESULT = elem; :}
                  | While:elem 
                  {: RESULT = elem; :}
                  | For:elem
                  {: RESULT = elem; :}
                  | Switch:elem 
                  {: RESULT = elem; :}
                  | Print:elem
                  {: RESULT = elem; :}
                  | Return:elem
                  {: RESULT = elem; :}
                  | InsLlamadaFuncion:elem
                  {: RESULT = elem; :};



Acceso0 ::= Acceso0:ref CAP E0:exp CCIERRE 
            {: RESULT = new AccesoArray(ref,exp); :}
            | Acceso0:ref PUNTO IDEN:campo 
            {: RESULT = new AccesoStruct(ref,campo.lexema); :}
            | Acceso1:ref
            {: RESULT = ref; :};
Acceso1 ::= IDEN:nombre
            {: RESULT = new AccesoVar(nombre.lexema); :}
            | POR Acceso1:ref
            {: RESULT = new AccesoPuntero(ref); :}
            | POR PAP Acceso0:ref PCIERRE
            {: RESULT = new AccesoPuntero(ref); :};

           

Declaracion ::= Tipo:t IDEN:nombre PUNTOYCOMA 
                {: RESULT = new DecClass(t,nombre.lexema,null); :}
                | Tipo:t IDEN:nombre IGUAL E0:exp PUNTOYCOMA
                {: RESULT = new DecClass(t,nombre.lexema,exp); :};

Asignacion ::= Acceso0:ref IGUAL E0:exp PUNTOYCOMA
               {: RESULT = new AsigClass(ref, exp); :};


If ::= IF PAP E0:exp PCIERRE BloqueInstrucciones:ins
       {: RESULT = new IfClass(exp,ins); :}
       | IF PAP E0:exp PCIERRE BloqueInstrucciones:ins ELSE BloqueInstrucciones:inselse
       {: RESULT = new IfClass(exp,ins,inselse); :};
//      | IF PAP E0 PCIERRE BloqueInstrucciones Elsif;
//Elsif ::= ELSIF PAP E0 PCIERRE BloqueInstrucciones Elsif
//         | ELSE BloqueInstrucciones
//         | ;

While ::= WHILE PAP E0:exp PCIERRE BloqueInstrucciones:ins
      {: RESULT = new WhileClass(exp,ins); :} ;   

For ::= FOR PAP INT:t IDEN:nombre IGUAL E0:expIni PUNTOYCOMA E0:expCond PUNTOYCOMA Acceso0:ref IGUAL E0:exp PCIERRE BloqueInstrucciones:ins
      {: RESULT = new ForClass(new DecClass(new TipoBasicoClass(t.lexema),nombre.lexema,expIni),expCond,new AsigClass(ref,exp),ins); :} ; 
 

Switch ::= SWITCH PAP E0:exp PCIERRE LAP BloqueCase:casos Default:def LCIERRE
      {: casos.add(def); RESULT = new SwitchClass(exp,casos); :};

BloqueCase ::= BloqueCase:casos Case:caso  
               {: RESULT = casos; casos.add(caso); :}
               | Case: caso
               {: RESULT = new ArrayList<CaseSwitch>(); RESULT.add(caso); :};   

Case ::= CASE E0:exp DOSPUNTOS Instrucciones:ins BREAK PUNTOYCOMA                            
      {: RESULT = new CaseSwitch(exp,ins); :}; 

Default ::= DEFAULT DOSPUNTOS Instrucciones:ins    
      {: RESULT = new CaseSwitch(ins); :} ; 

Print ::= PRINT PAP E0:exp PCIERRE PUNTOYCOMA
      {: RESULT = new PrintClass(exp); :};

Return ::= RETURN E0:exp PUNTOYCOMA 
            {: RESULT = new ReturnClass(exp); :}
            | RETURN PUNTOYCOMA
            {: RESULT = new ReturnClass(); :};


InsLlamadaFuncion ::= LlamadaFuncion:funcion PUNTOYCOMA
      {: RESULT = new FuncallClass(funcion); :};

LlamadaFuncion ::= IDEN:nombre PAP Params:params PCIERRE
      {: RESULT = new FuncallExp(nombre.lexema,params); :}; 



// Expresiones y operadores
E0 ::= E0:expizq OR E1:expdcha 
      {: RESULT = new OpOr(expizq,expdcha); :}
      | E1:exp
      {: RESULT = exp; :};

E1 ::= E1:expizq AND E2:expdcha 
      {: RESULT = new OpAnd(expizq,expdcha); :}
      | E2:exp
      {: RESULT = exp; :};

E2 ::= E2:expizq IGUALDAD E3:expdcha 
      {: RESULT = new OpIgualdad(expizq,expdcha); :}
      | E2:expizq DISTINTO E3:expdcha
      {: RESULT = new OpDesigualdad(expizq,expdcha); :}
      | E3:exp
      {: RESULT = exp; :};

E3 ::= E3:expizq MAYOR E4:expdcha
      {: RESULT = new OpMayor(expizq,expdcha); :}
      | E3:expizq MENOR E4:expdcha
      {: RESULT = new OpMenor(expizq,expdcha); :}
      | E3:expizq MAYORIGUAL E4:expdcha
      {: RESULT = new OpMayorigual(expizq,expdcha); :}
      | E3:expizq MENORIGUAL E4:expdcha
      {: RESULT = new OpMenorigual(expizq,expdcha); :}
      | E4:exp
      {: RESULT = exp; :};

E4 ::= E4:expizq MAS E5:expdcha
      {: RESULT = new OpSuma(expizq,expdcha); :}
      | E4:expizq MENOS E5:expdcha
      {: RESULT = new OpResta(expizq,expdcha); :}
      | E5:exp
      {: RESULT = exp; :};

E5 ::= E5:expizq POR E6:expdcha
      {: RESULT = new OpMult(expizq,expdcha); :}
      | E5:expizq DIV E6:expdcha
      {: RESULT = new OpDiv(expizq,expdcha); :}      
      | E5:expizq MOD E6:expdcha
      {: RESULT = new OpModulo(expizq,expdcha); :}
      | E6:exp
      {: RESULT = exp; :};

E6 ::= MENOS E6:exp
      {: RESULT = new OpCambioSigno(exp); :}    
      | NEG E6:exp
      {: RESULT = new OpNegar(exp); :}
      | E7:exp
      {: RESULT = exp; :};

E7 ::= E7:expizq POTENCIA E8:expdcha
      {: RESULT = new OpPotencia(expizq,expdcha); :}
      | E8: exp
      {: RESULT = exp; :};

E8 ::=  TRUE:cte
      {: RESULT = new Constante(cte.lexema); :}
      | FALSE:cte
      {: RESULT = new Constante(cte.lexema); :}
      | ENT:cte
      {: RESULT = new Constante(cte.lexema); :}
      | REAL:cte
      {: RESULT = new Constante(cte.lexema); :}
      | CARACTER:cte
      {: RESULT = new Constante(cte.lexema); :}
      | CADENA:cte
      {: RESULT = new Constante(cte.lexema); :}
      | Acceso0:ref
      {: RESULT = ref; :}
      | LlamadaFuncion: llamada
      {: RESULT = llamada; :}
      | NEW Tipo:t PAP PCIERRE
      {: RESULT = new NewExp(t); :}
      | PAP E0:exp PCIERRE
      {: RESULT = exp; :};
