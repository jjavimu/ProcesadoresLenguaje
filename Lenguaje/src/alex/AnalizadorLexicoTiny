package alex;

import errors.GestionErroresTiny;

%%
%cup
%char
%line
%class AnalizadorLexicoTiny
%unicode
%public

%{
  private ALexOperations ops;
  private int charline = 0;
  private GestionErroresTiny errores;
  public String lexema() {return yytext();}
  public int fila() {return yyline+1;}
  public int columna() {return yychar +1 - charline;}
  private void refrescaColumna() {
    charline = yychar + yytext().length();
  }
  public void fijaGestionErrores(GestionErroresTiny errores) {
   this.errores = errores;
  }
%}

%eofval{
  return ops.unidadEof();
%eofval}

%init{
  ops = new ALexOperations(this);
%init}

separador = [ \t\b]
newline = [\r\n]
comentario = (\/\/[^\n]*|/\*[^\*/]\*/)

letra  = ([A-Z]|[a-z])
digitoPositivo = [1-9]
digito = ({digitoPositivo}|0)
parteEntera = {digitoPositivo}{digito}*
parteDecimal = {digito}* {digitoPositivo}
numeroEntero = ({parteEntera}|0)
numeroReal = {parteEntera}\.{parteDecimal}

operadorSuma = \+
operadorResta = \-
operadorMultiplicacion = \*
operadorDivision = /
operadorPotencia = exp
operadorMod = %

operadorMayor = >
operadorMenor = <
operadorMayorIgual = >\=
operadorMenorIgual = <\=
operadorDistinto = !\=
operadorIgualdad = \=\=

operadorAnd = \&\&
operadorOr = \|\|
operadorNegacion = \!



igual = \=
coma  = \,
punto = \.
puntoycoma = ;
dospuntos = :
parentesisApertura = \(
parentesisCierre = \)
corcheteApertura = \[
corcheteCierre = \]
llaveApertura = \{
llaveCierre = \}


int = int
void = void
char = char
float = float
bool = bool
enum = enum

true = true
false = false
caracter = '.'
cadenaCaracteres = \".*\" 
new = new
referencia = &

while = while
for = for
if = if
elsif = elsif
else = else
struct = struct
switch = switch
case = case
break = break
default = default
return = return
print = print
main = main

identificador = {letra}({letra}|{digito})*



%%
{separador}               {}
{newline}                 {refrescaColumna();}
{comentario}              {refrescaColumna();}

{numeroEntero}            {return ops.unidadEnt();}
{numeroReal}              {return ops.unidadReal();}

{operadorSuma}            {return ops.unidadSuma();}
{operadorResta}           {return ops.unidadResta();}
{operadorMultiplicacion}  {return ops.unidadMul();}
{operadorDivision}        {return ops.unidadDiv();}
{operadorPotencia}        {return ops.unidadPot();}
{operadorMod}             {return ops.unidadMod();}
{operadorMayor}           {return ops.unidadMayor();}
{operadorMenor}           {return ops.unidadMenor();}
{operadorMayorIgual}      {return ops.unidadMayorIgual();}
{operadorMenorIgual}      {return ops.unidadMenorIgual();}
{operadorDistinto}        {return ops.unidadDistinto();}
{operadorIgualdad}        {return ops.unidadIgualdad();}
{operadorAnd}             {return ops.unidadAnd();}
{operadorOr}              {return ops.unidadOr();}
{operadorNegacion}        {return ops.unidadNegacion();}

{igual}                   {return ops.unidadIgual();} 
{coma}                    {return ops.unidadComa();}
{punto}                    {return ops.unidadPunto();}
{puntoycoma}              {return ops.unidadPuntoyComa();}
{dospuntos}               {return ops.unidadDospuntos();}
{parentesisApertura}      {return ops.unidadPAp();}
{parentesisCierre}        {return ops.unidadPCierre();} 
{corcheteApertura}        {return ops.unidadCAp();}
{corcheteCierre}          {return ops.unidadCCierre();} 
{llaveApertura}           {return ops.unidadLlaveApertura();}
{llaveCierre}             {return ops.unidadLlaveCierre();}

{int}                     {return ops.unidadInt();}
{void}                    {return ops.unidadVoid();}
{char}                    {return ops.unidadChar();}
{float}                   {return ops.unidadFloat();}
{bool}                    {return ops.unidadBool();}
{enum}                    {return ops.unidadEnum();}
{true}                    {return ops.unidadTrue();}
{false}                   {return ops.unidadFalse();}
{caracter}                {return ops.unidadCaracter();}
{cadenaCaracteres}        {return ops.unidadCadenaCaracteres();}
{new}                     {return ops.unidadNew();}
{referencia}              {return ops.unidadReferencia();}
{while}                   {return ops.unidadWhile();}
{for}                     {return ops.unidadFor();}
{if}                      {return ops.unidadIf();}
{elsif}                   {return ops.unidadElsif();}
{else}                    {return ops.unidadElse();}
{struct}                  {return ops.unidadStruct();}
{switch}                  {return ops.unidadSwitch();}
{case}                    {return ops.unidadCase();}
{break}                   {return ops.unidadBreak();}
{default}                 {return ops.unidadDefault();}
{return}                  {return ops.unidadReturn();}
{print}                   {return ops.unidadPrint();}
{main}                    {return ops.unidadMain();}

{identificador}           {return ops.unidadId();}

